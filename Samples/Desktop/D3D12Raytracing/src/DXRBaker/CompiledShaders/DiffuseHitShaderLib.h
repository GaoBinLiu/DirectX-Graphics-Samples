#if 0
;
; Note: shader requires additional functionality:
;       UAVs at every shader stage
;       Typed UAV Load Additional Formats
;
;
; Buffer Definitions:
;
; cbuffer HitShaderConstants
; {
;
;   struct HitShaderConstants
;   {
;
;       float3 SunDirection;                          ; Offset:    0
;       float3 SunColor;                              ; Offset:   16
;       float3 AmbientColor;                          ; Offset:   32
;       float4 ShadowTexelSize;                       ; Offset:   48
;       row_major float4x4 ModelToShadow;             ; Offset:   64
;       uint IsReflection;                            ; Offset:  128
;       uint UseShadowRays;                           ; Offset:  132
;   
;   } HitShaderConstants                              ; Offset:    0 Size:   136
;
; }
;
; cbuffer b1
; {
;
;   struct b1
;   {
;
;       struct struct.DynamicCB
;       {
;
;           row_major float4x4 cameraToWorld;         ; Offset:    0
;           float3 worldCameraPosition;               ; Offset:   64
;           uint padding;                             ; Offset:   76
;           float2 resolution;                        ; Offset:   80
;       
;       } g_dynamic                                   ; Offset:    0
;
;   
;   } b1                                              ; Offset:    0 Size:    88
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       uint MaterialID;                              ; Offset:    0
;   
;   } Material                                        ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for g_meshInfo
; {
;
;   struct struct.RayTraceMeshInfo
;   {
;
;       uint m_indexOffsetBytes;                      ; Offset:    0
;       uint m_uvAttributeOffsetBytes;                ; Offset:    4
;       uint m_normalAttributeOffsetBytes;            ; Offset:    8
;       uint m_tangentAttributeOffsetBytes;           ; Offset:   12
;       uint m_bitangentAttributeOffsetBytes;         ; Offset:   16
;       uint m_positionAttributeOffsetBytes;          ; Offset:   20
;       uint m_attributeStrideBytes;                  ; Offset:   24
;       uint m_materialInstanceId;                    ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; HitShaderConstants                cbuffer      NA          NA     CB0            cb0     1
; b1                                cbuffer      NA          NA     CB1            cb1     1
; Material                          cbuffer      NA          NA     CB2            cb3     1
; g_s0                              sampler      NA          NA      S0             s0     1
; shadowSampler                     sampler      NA          NA      S1             s1     1
; g_accel                           texture     i32         ras      T0             t0     1
; g_meshInfo                        texture  struct         r/o      T1             t1     1
; g_indices                         texture    byte         r/o      T2             t2     1
; g_attributes                      texture    byte         r/o      T3             t3     1
; texShadow                         texture     f32          2d      T4             t4     1
; texSSAO                           texture     f32          2d      T5             t5     1
; g_localTexture                    texture     f32          2d      T6             t6     1
; g_localNormal                     texture     f32          2d      T7             t7     1
; normals                           texture     f32          2d      T8            t13     1
; g_screenOutput                        UAV     f32          2d      U0             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.RaytracingAccelerationStructure = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<RayTraceMeshInfo>" = type { %struct.RayTraceMeshInfo }
%struct.RayTraceMeshInfo = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%struct.SamplerState = type { i32 }
%struct.SamplerComparisonState = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%HitShaderConstants = type { <3 x float>, <3 x float>, <3 x float>, <4 x float>, %class.matrix.float.4.4, i32, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%b1 = type { %struct.DynamicCB }
%struct.DynamicCB = type { %class.matrix.float.4.4, <3 x float>, i32, <2 x float> }
%Material = type { i32 }
%struct.RayPayload = type { i32, float }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.RayDesc = type { <3 x float>, float, <3 x float>, float }

@"\01?g_accel@@3URaytracingAccelerationStructure@@A" = external constant %struct.RaytracingAccelerationStructure, align 4
@"\01?g_screenOutput@@3V?$RWTexture2D@V?$vector@M$03@@@@A" = external constant %"class.RWTexture2D<vector<float, 4> >", align 4
@"\01?g_meshInfo@@3V?$StructuredBuffer@URayTraceMeshInfo@@@@A" = external constant %"class.StructuredBuffer<RayTraceMeshInfo>", align 4
@"\01?g_indices@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@"\01?g_attributes@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@"\01?texShadow@@3V?$Texture2D@M@@A" = external constant %"class.Texture2D<float>", align 4
@"\01?texSSAO@@3V?$Texture2D@M@@A" = external constant %"class.Texture2D<float>", align 4
@"\01?g_s0@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?shadowSampler@@3USamplerComparisonState@@A" = external constant %struct.SamplerComparisonState, align 4
@"\01?g_localTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?g_localNormal@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?normals@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@HitShaderConstants = external constant %HitShaderConstants
@b1 = external constant %b1
@Material = external constant %Material

; Function Attrs: nounwind
define void @"\01?Hit@@YAXURayPayload@@UBuiltInTriangleIntersectionAttributes@@@Z"(%struct.RayPayload* noalias nocapture %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly %attr) #0 {
  %1 = load %struct.SamplerComparisonState, %struct.SamplerComparisonState* @"\01?shadowSampler@@3USamplerComparisonState@@A", align 4
  %2 = load %struct.SamplerState, %struct.SamplerState* @"\01?g_s0@@3USamplerState@@A", align 4
  %3 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?normals@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %4 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?g_localNormal@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %5 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?g_localTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %6 = load %"class.Texture2D<float>", %"class.Texture2D<float>"* @"\01?texSSAO@@3V?$Texture2D@M@@A", align 4
  %7 = load %"class.Texture2D<float>", %"class.Texture2D<float>"* @"\01?texShadow@@3V?$Texture2D@M@@A", align 4
  %8 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?g_attributes@@3UByteAddressBuffer@@A", align 4
  %9 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?g_indices@@3UByteAddressBuffer@@A", align 4
  %10 = load %"class.StructuredBuffer<RayTraceMeshInfo>", %"class.StructuredBuffer<RayTraceMeshInfo>"* @"\01?g_meshInfo@@3V?$StructuredBuffer@URayTraceMeshInfo@@@@A", align 4
  %11 = load %struct.RaytracingAccelerationStructure, %struct.RaytracingAccelerationStructure* @"\01?g_accel@@3URaytracingAccelerationStructure@@A", align 4
  %12 = load %"class.RWTexture2D<vector<float, 4> >", %"class.RWTexture2D<vector<float, 4> >"* @"\01?g_screenOutput@@3V?$RWTexture2D@V?$vector@M$03@@@@A", align 4
  %13 = load %Material, %Material* @Material, align 4
  %14 = load %b1, %b1* @b1, align 4
  %15 = load %HitShaderConstants, %HitShaderConstants* @HitShaderConstants, align 4
  %Material = call %dx.types.Handle @dx.op.createHandleForLib.Material(i32 160, %Material %13)  ; CreateHandleForLib(Resource)
  %b1130 = call %dx.types.Handle @dx.op.createHandleForLib.b1(i32 160, %b1 %14)  ; CreateHandleForLib(Resource)
  %HitShaderConstants129 = call %dx.types.Handle @dx.op.createHandleForLib.HitShaderConstants(i32 160, %HitShaderConstants %15)  ; CreateHandleForLib(Resource)
  %16 = alloca %struct.RayPayload, align 8
  %RayTCurrent = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %17 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %payload, i32 0, i32 1
  store float %RayTCurrent, float* %17, align 4, !tbaa !88
  %18 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %payload, i32 0, i32 0
  %19 = load i32, i32* %18, align 4, !tbaa !92, !range !94
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %"\01?Load3x16BitIndices@@YA?AV?$vector@I$02@@I@Z.exit", label %334

"\01?Load3x16BitIndices@@YA?AV?$vector@I$02@@I@Z.exit": ; preds = %0
  %21 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %Material, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.i32 %21, 0
  %23 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<RayTraceMeshInfo>"(i32 160, %"class.StructuredBuffer<RayTraceMeshInfo>" %10)  ; CreateHandleForLib(Resource)
  %RawBufferLoad93 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %23, i32 %22, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %24 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad93, 0
  %RawBufferLoad92 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %23, i32 %22, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %25 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad92, 0
  %RawBufferLoad91 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %23, i32 %22, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %26 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad91, 0
  %RawBufferLoad90 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %23, i32 %22, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %27 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad90, 0
  %RawBufferLoad89 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %23, i32 %22, i32 16, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %28 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad89, 0
  %RawBufferLoad88 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %23, i32 %22, i32 20, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %29 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad88, 0
  %RawBufferLoad87 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %23, i32 %22, i32 24, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %30 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad87, 0
  %PrimitiveIndex86 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %31 = mul i32 %PrimitiveIndex86, 6
  %32 = add i32 %31, %24
  %33 = and i32 %32, -4
  %34 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %9)  ; CreateHandleForLib(Resource)
  %RawBufferLoad22 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %34, i32 %33, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %35 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad22, 0
  %36 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad22, 1
  %37 = icmp eq i32 %33, %32
  %38 = and i32 %35, 65535
  %39 = lshr i32 %35, 16
  %40 = lshr i32 %36, 16
  %.sink = select i1 %37, i32 %36, i32 %40
  %.0.i0 = select i1 %37, i32 %38, i32 %39
  %.0.i1.in = select i1 %37, i32 %39, i32 %36
  %.0.i1 = and i32 %.0.i1.in, 65535
  %41 = and i32 %.sink, 65535
  %42 = mul i32 %.0.i0, %30
  %43 = add i32 %42, %25
  %44 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %8)  ; CreateHandleForLib(Resource)
  %RawBufferLoad21 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %44, i32 %43, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %45 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad21, 0
  %46 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad21, 1
  %.i0 = bitcast i32 %45 to float
  %.i1 = bitcast i32 %46 to float
  %47 = mul i32 %.0.i1, %30
  %48 = add i32 %47, %25
  %RawBufferLoad20 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %44, i32 %48, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %49 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad20, 0
  %50 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad20, 1
  %.i0131 = bitcast i32 %49 to float
  %.i1132 = bitcast i32 %50 to float
  %51 = mul i32 %41, %30
  %52 = add i32 %51, %25
  %RawBufferLoad = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %44, i32 %52, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %53 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad, 0
  %54 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad, 1
  %.i0133 = bitcast i32 %53 to float
  %.i1134 = bitcast i32 %54 to float
  %55 = getelementptr inbounds %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %attr, i32 0, i32 0
  %56 = load <2 x float>, <2 x float>* %55, align 4
  %57 = extractelement <2 x float> %56, i32 0
  %58 = fsub fast float 1.000000e+00, %57
  %59 = extractelement <2 x float> %56, i32 1
  %60 = fsub fast float %58, %59
  %.i0135 = fmul fast float %60, %.i0
  %.i1136 = fmul fast float %60, %.i1
  %.i0137 = fmul fast float %57, %.i0131
  %.i1138 = fmul fast float %57, %.i1132
  %.i0141 = fmul fast float %59, %.i0133
  %.i1142 = fmul fast float %59, %.i1134
  %.i0139 = fadd fast float %.i0141, %.i0137
  %.i0143 = fadd fast float %.i0139, %.i0135
  %.i1140 = fadd fast float %.i1142, %.i1138
  %.i1144 = fadd fast float %.i1140, %.i1136
  %61 = add i32 %42, %26
  %62 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %8)  ; CreateHandleForLib(Resource)
  %RawBufferLoad94 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %61, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %63 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad94, 0
  %64 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad94, 1
  %65 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad94, 2
  %.i0145 = bitcast i32 %63 to float
  %.i1146 = bitcast i32 %64 to float
  %.i2 = bitcast i32 %65 to float
  %66 = add i32 %47, %26
  %RawBufferLoad95 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %66, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %67 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad95, 0
  %68 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad95, 1
  %69 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad95, 2
  %.i0147 = bitcast i32 %67 to float
  %.i1148 = bitcast i32 %68 to float
  %.i2149 = bitcast i32 %69 to float
  %70 = add i32 %51, %26
  %RawBufferLoad96 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %70, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %71 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad96, 0
  %72 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad96, 1
  %73 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad96, 2
  %.i0150 = bitcast i32 %71 to float
  %.i1151 = bitcast i32 %72 to float
  %.i2152 = bitcast i32 %73 to float
  %.i0153 = fmul fast float %.i0145, %60
  %.i1154 = fmul fast float %.i1146, %60
  %.i2155 = fmul fast float %.i2, %60
  %.i0156 = fmul fast float %.i0147, %57
  %.i1157 = fmul fast float %.i1148, %57
  %.i2158 = fmul fast float %.i2149, %57
  %.i0159 = fadd fast float %.i0156, %.i0153
  %.i1160 = fadd fast float %.i1157, %.i1154
  %.i2161 = fadd fast float %.i2158, %.i2155
  %.i0162 = fmul fast float %.i0150, %59
  %.i1163 = fmul fast float %.i1151, %59
  %.i2164 = fmul fast float %.i2152, %59
  %.i0165 = fadd fast float %.i0159, %.i0162
  %.i1166 = fadd fast float %.i1160, %.i1163
  %.i2167 = fadd fast float %.i2161, %.i2164
  %74 = call float @dx.op.dot3.f32(i32 55, float %.i0165, float %.i1166, float %.i2167, float %.i0165, float %.i1166, float %.i2167)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt79 = call float @dx.op.unary.f32(i32 25, float %74)  ; Rsqrt(value)
  %.i0168 = fmul fast float %.i0165, %Rsqrt79
  %.i1169 = fmul fast float %.i1166, %Rsqrt79
  %.i2170 = fmul fast float %.i2167, %Rsqrt79
  %75 = add i32 %42, %27
  %RawBufferLoad97 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %75, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %76 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad97, 0
  %77 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad97, 1
  %78 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad97, 2
  %.i0171 = bitcast i32 %76 to float
  %.i1172 = bitcast i32 %77 to float
  %.i2173 = bitcast i32 %78 to float
  %79 = add i32 %47, %27
  %RawBufferLoad98 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %79, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %80 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad98, 0
  %81 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad98, 1
  %82 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad98, 2
  %.i0174 = bitcast i32 %80 to float
  %.i1175 = bitcast i32 %81 to float
  %.i2176 = bitcast i32 %82 to float
  %83 = add i32 %51, %27
  %RawBufferLoad99 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %83, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %84 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad99, 0
  %85 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad99, 1
  %86 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad99, 2
  %.i0177 = bitcast i32 %84 to float
  %.i1178 = bitcast i32 %85 to float
  %.i2179 = bitcast i32 %86 to float
  %.i0180 = fmul fast float %.i0171, %60
  %.i1181 = fmul fast float %.i1172, %60
  %.i2182 = fmul fast float %.i2173, %60
  %.i0183 = fmul fast float %.i0174, %57
  %.i1184 = fmul fast float %.i1175, %57
  %.i2185 = fmul fast float %.i2176, %57
  %.i0186 = fadd fast float %.i0183, %.i0180
  %.i1187 = fadd fast float %.i1184, %.i1181
  %.i2188 = fadd fast float %.i2185, %.i2182
  %.i0189 = fmul fast float %.i0177, %59
  %.i1190 = fmul fast float %.i1178, %59
  %.i2191 = fmul fast float %.i2179, %59
  %.i0192 = fadd fast float %.i0186, %.i0189
  %.i1193 = fadd fast float %.i1187, %.i1190
  %.i2194 = fadd fast float %.i2188, %.i2191
  %87 = call float @dx.op.dot3.f32(i32 55, float %.i0192, float %.i1193, float %.i2194, float %.i0192, float %.i1193, float %.i2194)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt80 = call float @dx.op.unary.f32(i32 25, float %87)  ; Rsqrt(value)
  %.i0195 = fmul fast float %.i0192, %Rsqrt80
  %.i1196 = fmul fast float %.i1193, %Rsqrt80
  %.i2197 = fmul fast float %.i2194, %Rsqrt80
  %88 = add i32 %42, %28
  %RawBufferLoad100 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %88, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %89 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad100, 0
  %90 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad100, 1
  %91 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad100, 2
  %.i0198 = bitcast i32 %89 to float
  %.i1199 = bitcast i32 %90 to float
  %.i2200 = bitcast i32 %91 to float
  %92 = add i32 %47, %28
  %RawBufferLoad101 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %62, i32 %92, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %93 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad101, 0
  %94 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad101, 1
  %95 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad101, 2
  %.i0201 = bitcast i32 %93 to float
  %.i1202 = bitcast i32 %94 to float
  %.i2203 = bitcast i32 %95 to float
  %96 = add i32 %51, %28
  %97 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %8)  ; CreateHandleForLib(Resource)
  %RawBufferLoad102 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %97, i32 %96, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %98 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad102, 0
  %99 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad102, 1
  %100 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad102, 2
  %.i0204 = bitcast i32 %98 to float
  %.i1205 = bitcast i32 %99 to float
  %.i2206 = bitcast i32 %100 to float
  %.i0207 = fmul fast float %.i0198, %60
  %.i1208 = fmul fast float %.i1199, %60
  %.i2209 = fmul fast float %.i2200, %60
  %.i0210 = fmul fast float %.i0201, %57
  %.i1211 = fmul fast float %.i1202, %57
  %.i2212 = fmul fast float %.i2203, %57
  %.i0213 = fadd fast float %.i0210, %.i0207
  %.i1214 = fadd fast float %.i1211, %.i1208
  %.i2215 = fadd fast float %.i2212, %.i2209
  %.i0216 = fmul fast float %.i0204, %59
  %.i1217 = fmul fast float %.i1205, %59
  %.i2218 = fmul fast float %.i2206, %59
  %.i0219 = fadd fast float %.i0213, %.i0216
  %.i1220 = fadd fast float %.i1214, %.i1217
  %.i2221 = fadd fast float %.i2215, %.i2218
  %101 = call float @dx.op.dot3.f32(i32 55, float %.i0219, float %.i1220, float %.i2221, float %.i0219, float %.i1220, float %.i2221)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt81 = call float @dx.op.unary.f32(i32 25, float %101)  ; Rsqrt(value)
  %.i0222 = fmul fast float %.i0219, %Rsqrt81
  %.i1223 = fmul fast float %.i1220, %Rsqrt81
  %.i2224 = fmul fast float %.i2221, %Rsqrt81
  %102 = add i32 %42, %29
  %RawBufferLoad103 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %97, i32 %102, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %103 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad103, 0
  %104 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad103, 1
  %105 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad103, 2
  %.i0225 = bitcast i32 %103 to float
  %.i1226 = bitcast i32 %104 to float
  %.i2227 = bitcast i32 %105 to float
  %106 = add i32 %47, %29
  %RawBufferLoad104 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %97, i32 %106, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %107 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad104, 0
  %108 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad104, 1
  %109 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad104, 2
  %.i0228 = bitcast i32 %107 to float
  %.i1229 = bitcast i32 %108 to float
  %.i2230 = bitcast i32 %109 to float
  %110 = add i32 %51, %29
  %RawBufferLoad105 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %97, i32 %110, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %111 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad105, 0
  %112 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad105, 1
  %113 = extractvalue %dx.types.ResRet.i32 %RawBufferLoad105, 2
  %.i0231 = bitcast i32 %111 to float
  %.i1232 = bitcast i32 %112 to float
  %.i2233 = bitcast i32 %113 to float
  %WorldRayOrigin = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %WorldRayOrigin111 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %WorldRayOrigin112 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %WorldRayDirection = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %WorldRayDirection106 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %WorldRayDirection107 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %RayTCurrent85 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %.i0234 = fmul fast float %RayTCurrent85, %WorldRayDirection
  %.i1235 = fmul fast float %RayTCurrent85, %WorldRayDirection106
  %.i2236 = fmul fast float %RayTCurrent85, %WorldRayDirection107
  %.i0237 = fadd fast float %.i0234, %WorldRayOrigin
  %.i1238 = fadd fast float %.i1235, %WorldRayOrigin111
  %.i2239 = fadd fast float %.i2236, %WorldRayOrigin112
  %.i0240 = fsub fast float %.i0228, %.i0225
  %.i1241 = fsub fast float %.i1229, %.i1226
  %.i2242 = fsub fast float %.i2230, %.i2227
  %.i0243 = fsub fast float %.i0231, %.i0225
  %.i1244 = fsub fast float %.i1232, %.i1226
  %.i2245 = fsub fast float %.i2233, %.i2227
  %114 = fmul fast float %.i1244, %.i2242
  %115 = fmul fast float %.i2245, %.i1241
  %116 = fsub fast float %114, %115
  %117 = fmul fast float %.i2245, %.i0240
  %118 = fmul fast float %.i0243, %.i2242
  %119 = fsub fast float %117, %118
  %120 = fmul fast float %.i0243, %.i1241
  %121 = fmul fast float %.i1244, %.i0240
  %122 = fsub fast float %120, %121
  %123 = call float @dx.op.dot3.f32(i32 55, float %116, float %119, float %122, float %116, float %119, float %122)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt82 = call float @dx.op.unary.f32(i32 25, float %123)  ; Rsqrt(value)
  %.i0246 = fmul fast float %Rsqrt82, %116
  %.i1247 = fmul fast float %Rsqrt82, %119
  %.i2248 = fmul fast float %Rsqrt82, %122
  %DispatchRaysIndex = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %DispatchRaysIndex113 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %124 = add i32 %DispatchRaysIndex, 1
  %.i0249 = uitofp i32 %124 to float
  %.i1250 = uitofp i32 %DispatchRaysIndex113 to float
  %.i0251 = fadd fast float %.i0249, 5.000000e-01
  %.i1252 = fadd fast float %.i1250, 5.000000e-01
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %b1130, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 0
  %127 = extractvalue %dx.types.CBufRet.f32 %125, 1
  %.i0253 = fdiv fast float %.i0251, %126
  %.i1254 = fdiv fast float %.i1252, %127
  %.i0255 = fmul fast float %.i0253, 2.000000e+00
  %.i1256 = fmul fast float %.i1254, 2.000000e+00
  %.i0257 = fadd fast float %.i0255, -1.000000e+00
  %.i1258 = fadd fast float %.i1256, -1.000000e+00
  %128 = fsub fast float -0.000000e+00, %.i1258
  %129 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %b1130, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %130 = extractvalue %dx.types.CBufRet.f32 %129, 0
  %131 = extractvalue %dx.types.CBufRet.f32 %129, 1
  %132 = extractvalue %dx.types.CBufRet.f32 %129, 3
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %b1130, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 0
  %135 = extractvalue %dx.types.CBufRet.f32 %133, 1
  %136 = extractvalue %dx.types.CBufRet.f32 %133, 3
  %137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %b1130, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %138 = extractvalue %dx.types.CBufRet.f32 %137, 0
  %139 = extractvalue %dx.types.CBufRet.f32 %137, 1
  %140 = extractvalue %dx.types.CBufRet.f32 %137, 3
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %b1130, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 0
  %143 = extractvalue %dx.types.CBufRet.f32 %141, 1
  %144 = extractvalue %dx.types.CBufRet.f32 %141, 3
  %145 = fmul fast float %130, %.i0257
  %FMad73 = call float @dx.op.tertiary.f32(i32 46, float %131, float %128, float %145)  ; FMad(a,b,c)
  %146 = fadd fast float %FMad73, %132
  %147 = fmul fast float %134, %.i0257
  %FMad70 = call float @dx.op.tertiary.f32(i32 46, float %135, float %128, float %147)  ; FMad(a,b,c)
  %148 = fadd fast float %FMad70, %136
  %149 = fmul fast float %138, %.i0257
  %FMad67 = call float @dx.op.tertiary.f32(i32 46, float %139, float %128, float %149)  ; FMad(a,b,c)
  %150 = fadd fast float %FMad67, %140
  %151 = fmul fast float %142, %.i0257
  %FMad64 = call float @dx.op.tertiary.f32(i32 46, float %143, float %128, float %151)  ; FMad(a,b,c)
  %152 = fadd fast float %FMad64, %144
  %.i0259 = fdiv fast float %146, %152
  %.i1260 = fdiv fast float %148, %152
  %.i2261 = fdiv fast float %150, %152
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %b1130, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %.i0262 = fsub fast float %.i0259, %154
  %.i1263 = fsub fast float %.i1260, %155
  %.i2264 = fsub fast float %.i2261, %156
  %157 = call float @dx.op.dot3.f32(i32 55, float %.i0262, float %.i1263, float %.i2264, float %.i0262, float %.i1263, float %.i2264)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt78 = call float @dx.op.unary.f32(i32 25, float %157)  ; Rsqrt(value)
  %.i0265 = fmul fast float %.i0262, %Rsqrt78
  %.i1266 = fmul fast float %.i1263, %Rsqrt78
  %.i2267 = fmul fast float %.i2264, %Rsqrt78
  %158 = add i32 %DispatchRaysIndex113, 1
  %.i0268 = uitofp i32 %DispatchRaysIndex to float
  %.i1269 = uitofp i32 %158 to float
  %.i0270 = fadd fast float %.i0268, 5.000000e-01
  %.i1271 = fadd fast float %.i1269, 5.000000e-01
  %.i0272 = fdiv fast float %.i0270, %126
  %.i1273 = fdiv fast float %.i1271, %127
  %.i0274 = fmul fast float %.i0272, 2.000000e+00
  %.i1275 = fmul fast float %.i1273, 2.000000e+00
  %.i0276 = fadd fast float %.i0274, -1.000000e+00
  %.i1277 = fadd fast float %.i1275, -1.000000e+00
  %159 = fsub fast float -0.000000e+00, %.i1277
  %160 = fmul fast float %130, %.i0276
  %FMad61 = call float @dx.op.tertiary.f32(i32 46, float %131, float %159, float %160)  ; FMad(a,b,c)
  %161 = fadd fast float %FMad61, %132
  %162 = fmul fast float %134, %.i0276
  %FMad58 = call float @dx.op.tertiary.f32(i32 46, float %135, float %159, float %162)  ; FMad(a,b,c)
  %163 = fadd fast float %FMad58, %136
  %164 = fmul fast float %138, %.i0276
  %FMad55 = call float @dx.op.tertiary.f32(i32 46, float %139, float %159, float %164)  ; FMad(a,b,c)
  %165 = fadd fast float %FMad55, %140
  %166 = fmul fast float %142, %.i0276
  %FMad52 = call float @dx.op.tertiary.f32(i32 46, float %143, float %159, float %166)  ; FMad(a,b,c)
  %167 = fadd fast float %FMad52, %144
  %.i0278 = fdiv fast float %161, %167
  %.i1279 = fdiv fast float %163, %167
  %.i2280 = fdiv fast float %165, %167
  %.i0281 = fsub fast float %.i0278, %154
  %.i1282 = fsub fast float %.i1279, %155
  %.i2283 = fsub fast float %.i2280, %156
  %168 = call float @dx.op.dot3.f32(i32 55, float %.i0281, float %.i1282, float %.i2283, float %.i0281, float %.i1282, float %.i2283)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt77 = call float @dx.op.unary.f32(i32 25, float %168)  ; Rsqrt(value)
  %.i0284 = fmul fast float %.i0281, %Rsqrt77
  %.i1285 = fmul fast float %.i1282, %Rsqrt77
  %.i2286 = fmul fast float %.i2283, %Rsqrt77
  %.i0287 = fsub fast float %154, %.i0237
  %.i1288 = fsub fast float %155, %.i1238
  %.i2289 = fsub fast float %156, %.i2239
  %.i0290 = fsub fast float -0.000000e+00, %.i0246
  %.i1291 = fsub fast float -0.000000e+00, %.i1247
  %.i2292 = fsub fast float -0.000000e+00, %.i2248
  %169 = call float @dx.op.dot3.f32(i32 55, float %.i0290, float %.i1291, float %.i2292, float %.i0287, float %.i1288, float %.i2289)  ; Dot3(ax,ay,az,bx,by,bz)
  %170 = call float @dx.op.dot3.f32(i32 55, float %.i0246, float %.i1247, float %.i2248, float %.i0265, float %.i1266, float %.i2267)  ; Dot3(ax,ay,az,bx,by,bz)
  %171 = fdiv fast float %169, %170
  %.i0293 = fmul fast float %171, %.i0265
  %.i1294 = fmul fast float %171, %.i1266
  %.i2295 = fmul fast float %171, %.i2267
  %172 = call float @dx.op.dot3.f32(i32 55, float %.i0246, float %.i1247, float %.i2248, float %.i0284, float %.i1285, float %.i2286)  ; Dot3(ax,ay,az,bx,by,bz)
  %173 = fdiv fast float %169, %172
  %.i0305 = fmul fast float %173, %.i0284
  %.i1306 = fmul fast float %173, %.i1285
  %.i2307 = fmul fast float %173, %.i2286
  %.i0296 = fsub fast float %154, %.i0225
  %.i0317 = fadd fast float %.i0296, %.i0293
  %.i1297 = fsub fast float %155, %.i1226
  %.i1318 = fadd fast float %.i1297, %.i1294
  %.i2298 = fsub fast float %156, %.i2227
  %.i2319 = fadd fast float %.i2298, %.i2295
  %174 = call float @dx.op.dot3.f32(i32 55, float %.i0240, float %.i1241, float %.i2242, float %.i0240, float %.i1241, float %.i2242)  ; Dot3(ax,ay,az,bx,by,bz)
  %175 = call float @dx.op.dot3.f32(i32 55, float %.i0240, float %.i1241, float %.i2242, float %.i0243, float %.i1244, float %.i2245)  ; Dot3(ax,ay,az,bx,by,bz)
  %176 = call float @dx.op.dot3.f32(i32 55, float %.i0243, float %.i1244, float %.i2245, float %.i0243, float %.i1244, float %.i2245)  ; Dot3(ax,ay,az,bx,by,bz)
  %177 = call float @dx.op.dot3.f32(i32 55, float %.i0317, float %.i1318, float %.i2319, float %.i0240, float %.i1241, float %.i2242)  ; Dot3(ax,ay,az,bx,by,bz)
  %178 = call float @dx.op.dot3.f32(i32 55, float %.i0317, float %.i1318, float %.i2319, float %.i0243, float %.i1244, float %.i2245)  ; Dot3(ax,ay,az,bx,by,bz)
  %179 = fmul fast float %176, %174
  %180 = fmul fast float %175, %175
  %181 = fsub fast float %179, %180
  %182 = fdiv fast float 1.000000e+00, %181
  %183 = fmul fast float %177, %176
  %184 = fmul fast float %178, %175
  %185 = fsub fast float %183, %184
  %186 = fmul fast float %185, %182
  %187 = fmul fast float %178, %174
  %188 = fmul fast float %177, %175
  %189 = fsub fast float %187, %188
  %190 = fmul fast float %189, %182
  %191 = fsub fast float 1.000000e+00, %186
  %192 = fsub fast float %191, %190
  %.i0326 = fadd fast float %.i0296, %.i0305
  %.i1327 = fadd fast float %.i1297, %.i1306
  %.i2328 = fadd fast float %.i2298, %.i2307
  %193 = call float @dx.op.dot3.f32(i32 55, float %.i0326, float %.i1327, float %.i2328, float %.i0240, float %.i1241, float %.i2242)  ; Dot3(ax,ay,az,bx,by,bz)
  %194 = call float @dx.op.dot3.f32(i32 55, float %.i0326, float %.i1327, float %.i2328, float %.i0243, float %.i1244, float %.i2245)  ; Dot3(ax,ay,az,bx,by,bz)
  %195 = fmul fast float %193, %176
  %196 = fmul fast float %194, %175
  %197 = fsub fast float %195, %196
  %198 = fmul fast float %197, %182
  %199 = fmul fast float %194, %174
  %200 = fmul fast float %193, %175
  %201 = fsub fast float %199, %200
  %202 = fmul fast float %201, %182
  %203 = fsub fast float 1.000000e+00, %198
  %204 = fsub fast float %203, %202
  %205 = fmul fast float %192, %.i0
  %FMad49 = call float @dx.op.tertiary.f32(i32 46, float %186, float %.i0131, float %205)  ; FMad(a,b,c)
  %FMad48 = call float @dx.op.tertiary.f32(i32 46, float %190, float %.i0133, float %FMad49)  ; FMad(a,b,c)
  %206 = fmul fast float %192, %.i1
  %FMad47 = call float @dx.op.tertiary.f32(i32 46, float %186, float %.i1132, float %206)  ; FMad(a,b,c)
  %FMad46 = call float @dx.op.tertiary.f32(i32 46, float %190, float %.i1134, float %FMad47)  ; FMad(a,b,c)
  %.i0329 = fsub fast float %FMad48, %.i0143
  %.i1330 = fsub fast float %FMad46, %.i1144
  %207 = fmul fast float %204, %.i0
  %FMad45 = call float @dx.op.tertiary.f32(i32 46, float %198, float %.i0131, float %207)  ; FMad(a,b,c)
  %FMad44 = call float @dx.op.tertiary.f32(i32 46, float %202, float %.i0133, float %FMad45)  ; FMad(a,b,c)
  %208 = fmul fast float %204, %.i1
  %FMad43 = call float @dx.op.tertiary.f32(i32 46, float %198, float %.i1132, float %208)  ; FMad(a,b,c)
  %FMad42 = call float @dx.op.tertiary.f32(i32 46, float %202, float %.i1134, float %FMad43)  ; FMad(a,b,c)
  %.i0331 = fsub fast float %FMad44, %.i0143
  %.i1332 = fsub fast float %FMad42, %.i1144
  %209 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %5)  ; CreateHandleForLib(Resource)
  %210 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %2)  ; CreateHandleForLib(Resource)
  %211 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %209, %dx.types.Handle %210, float %.i0143, float %.i1144, float undef, float undef, i32 undef, i32 undef, i32 undef, float %.i0329, float %.i1330, float undef, float %.i0331, float %.i1332, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %212 = extractvalue %dx.types.ResRet.f32 %211, 0
  %213 = extractvalue %dx.types.ResRet.f32 %211, 1
  %214 = extractvalue %dx.types.ResRet.f32 %211, 2
  %215 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %4)  ; CreateHandleForLib(Resource)
  %216 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %215, %dx.types.Handle %210, float %.i0143, float %.i1144, float undef, float undef, i32 undef, i32 undef, i32 undef, float %.i0329, float %.i1330, float undef, float %.i0331, float %.i1332, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %217 = extractvalue %dx.types.ResRet.f32 %216, 0
  %218 = extractvalue %dx.types.ResRet.f32 %216, 1
  %219 = extractvalue %dx.types.ResRet.f32 %216, 2
  %.i0333 = fmul fast float %217, 2.000000e+00
  %.i1334 = fmul fast float %218, 2.000000e+00
  %.i2335 = fmul fast float %219, 2.000000e+00
  %.i0336 = fadd fast float %.i0333, -1.000000e+00
  %.i1337 = fadd fast float %.i1334, -1.000000e+00
  %.i2338 = fadd fast float %.i2335, -1.000000e+00
  %220 = call float @dx.op.dot3.f32(i32 55, float %.i0336, float %.i1337, float %.i2338, float %.i0336, float %.i1337, float %.i2338)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt = call float @dx.op.unary.f32(i32 25, float %220)  ; Rsqrt(value)
  %.i0339 = fmul fast float %.i0336, %Rsqrt
  %.i1340 = fmul fast float %.i1337, %Rsqrt
  %.i2341 = fmul fast float %.i2338, %Rsqrt
  %221 = fmul fast float %.i0195, %.i0339
  %FMad41 = call float @dx.op.tertiary.f32(i32 46, float %.i1340, float %.i0222, float %221)  ; FMad(a,b,c)
  %FMad40 = call float @dx.op.tertiary.f32(i32 46, float %.i2341, float %.i0168, float %FMad41)  ; FMad(a,b,c)
  %222 = fmul fast float %.i1196, %.i0339
  %FMad39 = call float @dx.op.tertiary.f32(i32 46, float %.i1340, float %.i1223, float %222)  ; FMad(a,b,c)
  %FMad38 = call float @dx.op.tertiary.f32(i32 46, float %.i2341, float %.i1169, float %FMad39)  ; FMad(a,b,c)
  %223 = fmul fast float %.i2197, %.i0339
  %FMad37 = call float @dx.op.tertiary.f32(i32 46, float %.i1340, float %.i2224, float %223)  ; FMad(a,b,c)
  %FMad36 = call float @dx.op.tertiary.f32(i32 46, float %.i2341, float %.i2170, float %FMad37)  ; FMad(a,b,c)
  %224 = call float @dx.op.dot3.f32(i32 55, float %FMad40, float %FMad38, float %FMad36, float %FMad40, float %FMad38, float %FMad36)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt83 = call float @dx.op.unary.f32(i32 25, float %224)  ; Rsqrt(value)
  %.i0342 = fmul fast float %Rsqrt83, %FMad40
  %.i1343 = fmul fast float %Rsqrt83, %FMad38
  %.i2344 = fmul fast float %Rsqrt83, %FMad36
  %225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %226 = extractvalue %dx.types.CBufRet.f32 %225, 0
  %227 = extractvalue %dx.types.CBufRet.f32 %225, 1
  %228 = extractvalue %dx.types.CBufRet.f32 %225, 2
  %.i0345 = fmul fast float %226, %212
  %.i1346 = fmul fast float %227, %213
  %.i2347 = fmul fast float %228, %214
  %229 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<float>"(i32 160, %"class.Texture2D<float>" %6)  ; CreateHandleForLib(Resource)
  %TextureLoad = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %229, i32 0, i32 %DispatchRaysIndex, i32 %DispatchRaysIndex113, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %230 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 0
  %.i0348 = fmul fast float %.i0345, %230
  %.i1349 = fmul fast float %.i1346, %230
  %.i2350 = fmul fast float %.i2347, %230
  %231 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %232 = extractvalue %dx.types.CBufRet.i32 %231, 1
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %245, label %234

; <label>:234                                     ; preds = %"\01?Load3x16BitIndices@@YA?AV?$vector@I$02@@I@Z.exit"
  %235 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %236 = extractvalue %dx.types.CBufRet.f32 %235, 0
  %237 = extractvalue %dx.types.CBufRet.f32 %235, 1
  %238 = extractvalue %dx.types.CBufRet.f32 %235, 2
  %239 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %16, i32 0, i32 0
  store i32 1, i32* %239, align 8
  %240 = getelementptr inbounds %struct.RayPayload, %struct.RayPayload* %16, i32 0, i32 1
  store float 0x47EFFFFFE0000000, float* %240, align 4
  %241 = call %dx.types.Handle @dx.op.createHandleForLib.struct.RaytracingAccelerationStructure(i32 160, %struct.RaytracingAccelerationStructure %11)  ; CreateHandleForLib(Resource)
  call void @dx.op.traceRay.struct.RayPayload(i32 157, %dx.types.Handle %241, i32 4, i32 -1, i32 0, i32 1, i32 0, float %.i0237, float %.i1238, float %.i2239, float 0x3FB99999A0000000, float %236, float %237, float %238, float 0x47EFFFFFE0000000, %struct.RayPayload* nonnull %16)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %242 = load float, float* %240, align 4
  %243 = fcmp fast olt float %242, 0x47EFFFFFE0000000
  br i1 %243, label %244, label %304

; <label>:244                                     ; preds = %234
  br label %304

; <label>:245                                     ; preds = %"\01?Load3x16BitIndices@@YA?AV?$vector@I$02@@I@Z.exit"
  %246 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.f32 %246, 0
  %248 = extractvalue %dx.types.CBufRet.f32 %246, 1
  %249 = extractvalue %dx.types.CBufRet.f32 %246, 2
  %250 = extractvalue %dx.types.CBufRet.f32 %246, 3
  %251 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %252 = extractvalue %dx.types.CBufRet.f32 %251, 0
  %253 = extractvalue %dx.types.CBufRet.f32 %251, 1
  %254 = extractvalue %dx.types.CBufRet.f32 %251, 2
  %255 = extractvalue %dx.types.CBufRet.f32 %251, 3
  %256 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %257 = extractvalue %dx.types.CBufRet.f32 %256, 0
  %258 = extractvalue %dx.types.CBufRet.f32 %256, 1
  %259 = extractvalue %dx.types.CBufRet.f32 %256, 2
  %260 = extractvalue %dx.types.CBufRet.f32 %256, 3
  %261 = fmul fast float %247, %.i0237
  %FMad35 = call float @dx.op.tertiary.f32(i32 46, float %248, float %.i1238, float %261)  ; FMad(a,b,c)
  %FMad34 = call float @dx.op.tertiary.f32(i32 46, float %249, float %.i2239, float %FMad35)  ; FMad(a,b,c)
  %262 = fadd fast float %FMad34, %250
  %263 = fmul fast float %252, %.i0237
  %FMad32 = call float @dx.op.tertiary.f32(i32 46, float %253, float %.i1238, float %263)  ; FMad(a,b,c)
  %FMad31 = call float @dx.op.tertiary.f32(i32 46, float %254, float %.i2239, float %FMad32)  ; FMad(a,b,c)
  %264 = fadd fast float %FMad31, %255
  %265 = fmul fast float %257, %.i0237
  %FMad29 = call float @dx.op.tertiary.f32(i32 46, float %258, float %.i1238, float %265)  ; FMad(a,b,c)
  %FMad28 = call float @dx.op.tertiary.f32(i32 46, float %259, float %.i2239, float %FMad29)  ; FMad(a,b,c)
  %266 = fadd fast float %FMad28, %260
  %267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.f32 %267, 0
  %269 = fmul fast float %268, 2.500000e-01
  %270 = fmul fast float %268, 1.750000e+00
  %271 = fmul fast float %268, 1.250000e+00
  %272 = fmul fast float %268, 7.500000e-01
  %273 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<float>"(i32 160, %"class.Texture2D<float>" %7)  ; CreateHandleForLib(Resource)
  %274 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerComparisonState(i32 160, %struct.SamplerComparisonState %1)  ; CreateHandleForLib(Resource)
  %275 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %262, float %264, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %276 = extractvalue %dx.types.ResRet.f32 %275, 0
  %277 = fmul fast float %276, 2.000000e+00
  %.i0351 = fsub fast float %262, %270
  %.i1352 = fadd fast float %269, %264
  %278 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0351, float %.i1352, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %279 = extractvalue %dx.types.ResRet.f32 %278, 0
  %280 = fadd fast float %279, %277
  %.i0353 = fsub fast float %262, %269
  %.i1354 = fsub fast float %264, %270
  %281 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0353, float %.i1354, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %282 = extractvalue %dx.types.ResRet.f32 %281, 0
  %283 = fadd fast float %280, %282
  %.i0355 = fadd fast float %270, %262
  %.i1356 = fsub fast float %264, %269
  %284 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0355, float %.i1356, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %285 = extractvalue %dx.types.ResRet.f32 %284, 0
  %286 = fadd fast float %283, %285
  %.i0357 = fadd fast float %269, %262
  %.i1358 = fadd fast float %270, %264
  %287 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0357, float %.i1358, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %288 = extractvalue %dx.types.ResRet.f32 %287, 0
  %289 = fadd fast float %286, %288
  %.i0359 = fsub fast float %262, %272
  %.i1360 = fadd fast float %271, %264
  %290 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0359, float %.i1360, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %291 = extractvalue %dx.types.ResRet.f32 %290, 0
  %292 = fadd fast float %289, %291
  %.i0361 = fsub fast float %262, %271
  %.i1362 = fsub fast float %264, %272
  %293 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0361, float %.i1362, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %294 = extractvalue %dx.types.ResRet.f32 %293, 0
  %295 = fadd fast float %292, %294
  %.i0363 = fadd fast float %272, %262
  %.i1364 = fsub fast float %264, %271
  %296 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0363, float %.i1364, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %297 = extractvalue %dx.types.ResRet.f32 %296, 0
  %298 = fadd fast float %295, %297
  %.i0365 = fadd fast float %271, %262
  %.i1366 = fadd fast float %272, %264
  %299 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %273, %dx.types.Handle %274, float %.i0365, float %.i1366, float undef, float undef, i32 undef, i32 undef, i32 undef, float %266)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %300 = extractvalue %dx.types.ResRet.f32 %299, 0
  %301 = fadd fast float %298, %300
  %302 = fmul fast float %301, 0x3FB99999A0000000
  %303 = fmul fast float %302, %302
  br label %304

; <label>:304                                     ; preds = %245, %244, %234
  %shadow.0 = phi float [ 0.000000e+00, %244 ], [ 1.000000e+00, %234 ], [ %303, %245 ]
  %.i0367 = fsub fast float -0.000000e+00, %WorldRayDirection
  %.i1368 = fsub fast float -0.000000e+00, %WorldRayDirection106
  %.i2369 = fsub fast float -0.000000e+00, %WorldRayDirection107
  %305 = call float @dx.op.dot3.f32(i32 55, float %.i0367, float %.i1368, float %.i2369, float %.i0367, float %.i1368, float %.i2369)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt84 = call float @dx.op.unary.f32(i32 25, float %305)  ; Rsqrt(value)
  %.i0370 = fmul fast float %Rsqrt84, %.i0367
  %.i1371 = fmul fast float %Rsqrt84, %.i1368
  %.i2372 = fmul fast float %Rsqrt84, %.i2369
  %306 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %307 = extractvalue %dx.types.CBufRet.f32 %306, 0
  %308 = extractvalue %dx.types.CBufRet.f32 %306, 1
  %309 = extractvalue %dx.types.CBufRet.f32 %306, 2
  %310 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %311 = extractvalue %dx.types.CBufRet.f32 %310, 0
  %312 = extractvalue %dx.types.CBufRet.f32 %310, 1
  %313 = extractvalue %dx.types.CBufRet.f32 %310, 2
  %.i0373 = fsub fast float %311, %.i0370
  %.i1374 = fsub fast float %312, %.i1371
  %.i2375 = fsub fast float %313, %.i2372
  %314 = call float @dx.op.dot3.f32(i32 55, float %.i0373, float %.i1374, float %.i2375, float %.i0373, float %.i1374, float %.i2375)  ; Dot3(ax,ay,az,bx,by,bz)
  %Rsqrt76 = call float @dx.op.unary.f32(i32 25, float %314)  ; Rsqrt(value)
  %.i0376 = fmul fast float %.i0373, %Rsqrt76
  %.i1377 = fmul fast float %.i1374, %Rsqrt76
  %.i2378 = fmul fast float %.i2375, %Rsqrt76
  %315 = call float @dx.op.dot3.f32(i32 55, float %311, float %312, float %313, float %.i0376, float %.i1377, float %.i2378)  ; Dot3(ax,ay,az,bx,by,bz)
  %Saturate23 = call float @dx.op.unary.f32(i32 7, float %315)  ; Saturate(value)
  %316 = fsub fast float 1.000000e+00, %Saturate23
  %Log74 = call float @dx.op.unary.f32(i32 23, float %316)  ; Log(value)
  %317 = fmul fast float %Log74, 5.000000e+00
  %Exp75 = call float @dx.op.unary.f32(i32 21, float %317)  ; Exp(value)
  %318 = fmul fast float %Exp75, %212
  %319 = fmul fast float %Exp75, %213
  %320 = fmul fast float %Exp75, %214
  %.i0391 = fsub fast float %212, %318
  %.i1392 = fsub fast float %213, %319
  %.i2393 = fsub fast float %214, %320
  %321 = call float @dx.op.dot3.f32(i32 55, float %.i0342, float %.i1343, float %.i2344, float %311, float %312, float %313)  ; Dot3(ax,ay,az,bx,by,bz)
  %Saturate = call float @dx.op.unary.f32(i32 7, float %321)  ; Saturate(value)
  %.i0394 = fmul fast float %307, %shadow.0
  %.i0397 = fmul fast float %.i0394, %Saturate
  %.i0400 = fmul fast float %.i0397, %.i0391
  %.i1395 = fmul fast float %308, %shadow.0
  %.i1398 = fmul fast float %.i1395, %Saturate
  %.i1401 = fmul fast float %.i1398, %.i1392
  %.i2396 = fmul fast float %309, %shadow.0
  %.i2399 = fmul fast float %.i2396, %Saturate
  %.i2402 = fmul fast float %.i2399, %.i2393
  %.i0403 = fadd fast float %.i0400, %.i0348
  %.i1404 = fadd fast float %.i1401, %.i1349
  %.i2405 = fadd fast float %.i2402, %.i2350
  %322 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %HitShaderConstants129, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %323 = extractvalue %dx.types.CBufRet.i32 %322, 0
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %332, label %325

; <label>:325                                     ; preds = %304
  %326 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %3)  ; CreateHandleForLib(Resource)
  %TextureLoad128 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %326, i32 0, i32 %DispatchRaysIndex, i32 %DispatchRaysIndex113, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %327 = extractvalue %dx.types.ResRet.f32 %TextureLoad128, 3
  %328 = call %dx.types.Handle @"dx.op.createHandleForLib.class.RWTexture2D<vector<float, 4> >"(i32 160, %"class.RWTexture2D<vector<float, 4> >" %12)  ; CreateHandleForLib(Resource)
  %TextureLoad127 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %328, i32 undef, i32 %DispatchRaysIndex, i32 %DispatchRaysIndex113, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %329 = extractvalue %dx.types.ResRet.f32 %TextureLoad127, 0
  %330 = extractvalue %dx.types.ResRet.f32 %TextureLoad127, 1
  %331 = extractvalue %dx.types.ResRet.f32 %TextureLoad127, 2
  %.i0406 = fmul fast float %327, %.i0403
  %.i1407 = fmul fast float %327, %.i1404
  %.i2408 = fmul fast float %327, %.i2405
  %.i0409 = fadd fast float %329, %.i0406
  %.i1410 = fadd fast float %330, %.i1407
  %.i2411 = fadd fast float %331, %.i2408
  br label %332

; <label>:332                                     ; preds = %325, %304
  %outputColor.0.i0 = phi float [ %.i0409, %325 ], [ %.i0403, %304 ]
  %outputColor.0.i1 = phi float [ %.i1410, %325 ], [ %.i1404, %304 ]
  %outputColor.0.i2 = phi float [ %.i2411, %325 ], [ %.i2405, %304 ]
  %333 = call %dx.types.Handle @"dx.op.createHandleForLib.class.RWTexture2D<vector<float, 4> >"(i32 160, %"class.RWTexture2D<vector<float, 4> >" %12)  ; CreateHandleForLib(Resource)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %333, i32 %DispatchRaysIndex, i32 %DispatchRaysIndex113, i32 undef, float %outputColor.0.i0, float %outputColor.0.i1, float %outputColor.0.i2, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %334

; <label>:334                                     ; preds = %332, %0
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #2

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayOrigin.f32(i32, i8) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.dispatchRaysIndex.i32(i32, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.traceRay.struct.RayPayload(i32, %dx.types.Handle, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, %struct.RayPayload*) #3

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #3

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.HitShaderConstants(i32, %HitShaderConstants) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.b1(i32, %b1) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.Material(i32, %Material) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32, %struct.ByteAddressBuffer) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<float>"(i32, %"class.Texture2D<float>") #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerComparisonState(i32, %struct.SamplerComparisonState) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<RayTraceMeshInfo>"(i32, %"class.StructuredBuffer<RayTraceMeshInfo>") #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32, %"class.Texture2D<vector<float, 4> >") #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32, %struct.SamplerState) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.RaytracingAccelerationStructure(i32, %struct.RaytracingAccelerationStructure) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.RWTexture2D<vector<float, 4> >"(i32, %"class.RWTexture2D<vector<float, 4> >") #1

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!27, !77}
!dx.entryPoints = !{!83, !85}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 4}
!3 = !{!"lib", i32 6, i32 3}
!4 = !{!5, !18, !20, !24}
!5 = !{!6, !8, !10, !11, !12, !14, !15, !16, !17}
!6 = !{i32 0, %struct.RaytracingAccelerationStructure* @"\01?g_accel@@3URaytracingAccelerationStructure@@A", !"g_accel", i32 0, i32 0, i32 1, i32 16, i32 0, !7}
!7 = !{i32 0, i32 4}
!8 = !{i32 1, %"class.StructuredBuffer<RayTraceMeshInfo>"* @"\01?g_meshInfo@@3V?$StructuredBuffer@URayTraceMeshInfo@@@@A", !"g_meshInfo", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 32}
!10 = !{i32 2, %struct.ByteAddressBuffer* @"\01?g_indices@@3UByteAddressBuffer@@A", !"g_indices", i32 0, i32 2, i32 1, i32 11, i32 0, null}
!11 = !{i32 3, %struct.ByteAddressBuffer* @"\01?g_attributes@@3UByteAddressBuffer@@A", !"g_attributes", i32 0, i32 3, i32 1, i32 11, i32 0, null}
!12 = !{i32 4, %"class.Texture2D<float>"* @"\01?texShadow@@3V?$Texture2D@M@@A", !"texShadow", i32 0, i32 4, i32 1, i32 2, i32 0, !13}
!13 = !{i32 0, i32 9}
!14 = !{i32 5, %"class.Texture2D<float>"* @"\01?texSSAO@@3V?$Texture2D@M@@A", !"texSSAO", i32 0, i32 5, i32 1, i32 2, i32 0, !13}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* @"\01?g_localTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"g_localTexture", i32 0, i32 6, i32 1, i32 2, i32 0, !13}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* @"\01?g_localNormal@@3V?$Texture2D@V?$vector@M$03@@@@A", !"g_localNormal", i32 0, i32 7, i32 1, i32 2, i32 0, !13}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* @"\01?normals@@3V?$Texture2D@V?$vector@M$03@@@@A", !"normals", i32 0, i32 13, i32 1, i32 2, i32 0, !13}
!18 = !{!19}
!19 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* @"\01?g_screenOutput@@3V?$RWTexture2D@V?$vector@M$03@@@@A", !"g_screenOutput", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !13}
!20 = !{!21, !22, !23}
!21 = !{i32 0, %HitShaderConstants* @HitShaderConstants, !"HitShaderConstants", i32 0, i32 0, i32 1, i32 136, null}
!22 = !{i32 1, %b1* @b1, !"b1", i32 0, i32 1, i32 1, i32 88, null}
!23 = !{i32 2, %Material* @Material, !"Material", i32 0, i32 3, i32 1, i32 4, null}
!24 = !{!25, !26}
!25 = !{i32 0, %struct.SamplerState* @"\01?g_s0@@3USamplerState@@A", !"g_s0", i32 0, i32 0, i32 1, i32 0, null}
!26 = !{i32 1, %struct.SamplerComparisonState* @"\01?shadowSampler@@3USamplerComparisonState@@A", !"shadowSampler", i32 0, i32 1, i32 1, i32 1, null}
!27 = !{i32 0, %struct.RaytracingAccelerationStructure undef, !28, %"class.RWTexture2D<vector<float, 4> >" undef, !30, %struct.DynamicCB undef, !32, %"class.StructuredBuffer<RayTraceMeshInfo>" undef, !38, %struct.RayTraceMeshInfo undef, !40, %struct.ByteAddressBuffer undef, !28, %"class.Texture2D<float>" undef, !49, %"class.Texture2D<float>::mips_type" undef, !51, %"class.Texture2D<vector<float, 4> >" undef, !53, %"class.Texture2D<vector<float, 4> >::mips_type" undef, !51, %struct.RayPayload undef, !55, %struct.BuiltInTriangleIntersectionAttributes undef, !58, %struct.RayDesc undef, !60, %HitShaderConstants undef, !65, %b1 undef, !73, %Material undef, !75}
!28 = !{i32 4, !29}
!29 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 4}
!30 = !{i32 16, !31}
!31 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!32 = !{i32 88, !33, !35, !36, !37}
!33 = !{i32 6, !"cameraToWorld", i32 2, !34, i32 3, i32 0, i32 7, i32 9}
!34 = !{i32 4, i32 4, i32 1}
!35 = !{i32 6, !"worldCameraPosition", i32 3, i32 64, i32 7, i32 9}
!36 = !{i32 6, !"padding", i32 3, i32 76, i32 7, i32 5}
!37 = !{i32 6, !"resolution", i32 3, i32 80, i32 7, i32 9}
!38 = !{i32 32, !39}
!39 = !{i32 6, !"h", i32 3, i32 0}
!40 = !{i32 32, !41, !42, !43, !44, !45, !46, !47, !48}
!41 = !{i32 6, !"m_indexOffsetBytes", i32 3, i32 0, i32 7, i32 5}
!42 = !{i32 6, !"m_uvAttributeOffsetBytes", i32 3, i32 4, i32 7, i32 5}
!43 = !{i32 6, !"m_normalAttributeOffsetBytes", i32 3, i32 8, i32 7, i32 5}
!44 = !{i32 6, !"m_tangentAttributeOffsetBytes", i32 3, i32 12, i32 7, i32 5}
!45 = !{i32 6, !"m_bitangentAttributeOffsetBytes", i32 3, i32 16, i32 7, i32 5}
!46 = !{i32 6, !"m_positionAttributeOffsetBytes", i32 3, i32 20, i32 7, i32 5}
!47 = !{i32 6, !"m_attributeStrideBytes", i32 3, i32 24, i32 7, i32 5}
!48 = !{i32 6, !"m_materialInstanceId", i32 3, i32 28, i32 7, i32 5}
!49 = !{i32 8, !31, !50}
!50 = !{i32 6, !"mips", i32 3, i32 4}
!51 = !{i32 4, !52}
!52 = !{i32 6, !"handle", i32 3, i32 0, i32 7, i32 5}
!53 = !{i32 20, !31, !54}
!54 = !{i32 6, !"mips", i32 3, i32 16}
!55 = !{i32 8, !56, !57}
!56 = !{i32 6, !"SkipShading", i32 3, i32 0, i32 7, i32 1}
!57 = !{i32 6, !"RayHitT", i32 3, i32 4, i32 7, i32 9}
!58 = !{i32 8, !59}
!59 = !{i32 6, !"barycentrics", i32 3, i32 0, i32 7, i32 9}
!60 = !{i32 32, !61, !62, !63, !64}
!61 = !{i32 6, !"Origin", i32 3, i32 0, i32 7, i32 9}
!62 = !{i32 6, !"TMin", i32 3, i32 12, i32 7, i32 9}
!63 = !{i32 6, !"Direction", i32 3, i32 16, i32 7, i32 9}
!64 = !{i32 6, !"TMax", i32 3, i32 28, i32 7, i32 9}
!65 = !{i32 136, !66, !67, !68, !69, !70, !71, !72}
!66 = !{i32 6, !"SunDirection", i32 3, i32 0, i32 7, i32 9}
!67 = !{i32 6, !"SunColor", i32 3, i32 16, i32 7, i32 9}
!68 = !{i32 6, !"AmbientColor", i32 3, i32 32, i32 7, i32 9}
!69 = !{i32 6, !"ShadowTexelSize", i32 3, i32 48, i32 7, i32 9}
!70 = !{i32 6, !"ModelToShadow", i32 2, !34, i32 3, i32 64, i32 7, i32 9}
!71 = !{i32 6, !"IsReflection", i32 3, i32 128, i32 7, i32 5}
!72 = !{i32 6, !"UseShadowRays", i32 3, i32 132, i32 7, i32 5}
!73 = !{i32 88, !74}
!74 = !{i32 6, !"g_dynamic", i32 3, i32 0}
!75 = !{i32 4, !76}
!76 = !{i32 6, !"MaterialID", i32 3, i32 0, i32 7, i32 5}
!77 = !{i32 1, void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?Hit@@YAXURayPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !78}
!78 = !{!79, !81, !82}
!79 = !{i32 1, !80, !80}
!80 = !{}
!81 = !{i32 2, !80, !80}
!82 = !{i32 0, !80, !80}
!83 = !{null, !"", null, !4, !84}
!84 = !{i32 0, i64 73744}
!85 = !{void (%struct.RayPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?Hit@@YAXURayPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !"\01?Hit@@YAXURayPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", null, null, !86}
!86 = !{i32 8, i32 10, i32 6, i32 8, i32 7, i32 8, i32 5, !87}
!87 = !{i32 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"float", !90, i64 0}
!90 = !{!"omnipotent char", !91, i64 0}
!91 = !{!"Simple C/C++ TBAA"}
!92 = !{!93, !93, i64 0}
!93 = !{!"bool", !90, i64 0}
!94 = !{i32 0, i32 2}

#endif

const unsigned char g_pDiffuseHitShaderLib[] = {
  0x44, 0x58, 0x42, 0x43, 0x82, 0xb5, 0x33, 0x2c, 0x6b, 0x8e, 0xad, 0x91,
  0xaf, 0x71, 0x74, 0x0d, 0x21, 0xf6, 0xbc, 0xbe, 0x01, 0x00, 0x00, 0x00,
  0xec, 0x37, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0xc4, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x44, 0x41, 0x54, 0x80, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00,
  0xfc, 0x02, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xec, 0x00, 0x00, 0x00, 0x00, 0x48, 0x69, 0x74, 0x53, 0x68, 0x61, 0x64,
  0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x00,
  0x62, 0x31, 0x00, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x00,
  0x67, 0x5f, 0x73, 0x30, 0x00, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53,
  0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x67, 0x5f, 0x61, 0x63, 0x63,
  0x65, 0x6c, 0x00, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x66,
  0x6f, 0x00, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x00,
  0x67, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
  0x00, 0x74, 0x65, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x00, 0x74,
  0x65, 0x78, 0x53, 0x53, 0x41, 0x4f, 0x00, 0x67, 0x5f, 0x6c, 0x6f, 0x63,
  0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x67, 0x5f,
  0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x00,
  0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x00, 0x67, 0x5f, 0x73, 0x63,
  0x72, 0x65, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x00, 0x01,
  0x3f, 0x48, 0x69, 0x74, 0x40, 0x40, 0x59, 0x41, 0x58, 0x55, 0x52, 0x61,
  0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40, 0x55, 0x42,
  0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6e, 0x67,
  0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69,
  0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
  0x40, 0x40, 0x40, 0x5a, 0x00, 0x48, 0x69, 0x74, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00,
  0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x0a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
  0x63, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x20, 0x34, 0x00, 0x00,
  0x63, 0x00, 0x06, 0x00, 0x08, 0x0d, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x34, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xff, 0x0c, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x1c, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xe4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x72, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x91, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x39, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0x20, 0x00, 0x12, 0x60, 0xd9, 0x60, 0x08, 0x02, 0xb0, 0x00,
  0xd5, 0x06, 0xf0, 0x18, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x24, 0x82,
  0x1c, 0xd2, 0x61, 0x1e, 0xc2, 0x41, 0x1c, 0xd8, 0xa1, 0x1c, 0xda, 0x80,
  0x1e, 0xc2, 0x21, 0x1d, 0xd8, 0xa1, 0x0d, 0xc6, 0x21, 0x1c, 0xd8, 0x81,
  0x1d, 0xe6, 0x01, 0x30, 0x87, 0x70, 0x60, 0x87, 0x79, 0x28, 0x07, 0x80,
  0x60, 0x87, 0x72, 0x98, 0x87, 0x79, 0x68, 0x03, 0x78, 0x90, 0x87, 0x72,
  0x18, 0x87, 0x74, 0x98, 0x87, 0x72, 0x68, 0x03, 0x73, 0x80, 0x87, 0x76,
  0x08, 0x07, 0x72, 0x00, 0xcc, 0x21, 0x1c, 0xd8, 0x61, 0x1e, 0xca, 0x01,
  0x20, 0xdc, 0xe1, 0x1d, 0xda, 0xc0, 0x1c, 0xe4, 0x21, 0x1c, 0xda, 0xa1,
  0x1c, 0xda, 0x00, 0x1e, 0xde, 0x21, 0x1d, 0xdc, 0x81, 0x1e, 0xca, 0x41,
  0x1e, 0xda, 0xa0, 0x1c, 0xd8, 0x21, 0x1d, 0xda, 0x01, 0x30, 0x87, 0x70,
  0x60, 0x87, 0x79, 0x28, 0x07, 0x80, 0x70, 0x87, 0x77, 0x68, 0x83, 0x74,
  0x70, 0x07, 0x73, 0x98, 0x87, 0x36, 0x30, 0x07, 0x78, 0x68, 0x83, 0x76,
  0x08, 0x07, 0x7a, 0x40, 0x07, 0xc0, 0x1c, 0xc2, 0x81, 0x1d, 0xe6, 0xa1,
  0x1c, 0x00, 0xc2, 0x1d, 0xde, 0xa1, 0x0d, 0xdc, 0x21, 0x1c, 0xdc, 0x61,
  0x1e, 0xda, 0xc0, 0x1c, 0xe0, 0xa1, 0x0d, 0xda, 0x21, 0x1c, 0xe8, 0x01,
  0x1d, 0x00, 0x73, 0x08, 0x07, 0x76, 0x98, 0x87, 0x72, 0x00, 0x06, 0x77,
  0x78, 0x87, 0x36, 0x90, 0x87, 0x72, 0x08, 0x07, 0x76, 0x48, 0x87, 0x73,
  0x70, 0x87, 0x36, 0x98, 0x07, 0x7a, 0x08, 0x87, 0x71, 0x58, 0x07, 0x80,
  0x98, 0x07, 0x7a, 0x08, 0x87, 0x71, 0x58, 0x87, 0x36, 0x80, 0x07, 0x79,
  0x78, 0x07, 0x7a, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x87, 0x36,
  0x10, 0x87, 0x7a, 0x30, 0x07, 0x73, 0x28, 0x07, 0x79, 0x68, 0x83, 0x79,
  0x48, 0x07, 0x7d, 0x28, 0x07, 0x00, 0x0e, 0x00, 0xa2, 0x1e, 0xdc, 0x61,
  0x1e, 0xc2, 0xc1, 0x1c, 0xca, 0xa1, 0x0d, 0xcc, 0x01, 0x1e, 0xda, 0xa0,
  0x1d, 0xc2, 0x81, 0x1e, 0xd0, 0x01, 0x30, 0x87, 0x70, 0x60, 0x87, 0x79,
  0x28, 0x07, 0x80, 0xa8, 0x87, 0x79, 0x28, 0x87, 0x36, 0x98, 0x87, 0x77,
  0x30, 0x07, 0x7a, 0x68, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a,
  0x00, 0xcc, 0x21, 0x1c, 0xd8, 0x61, 0x1e, 0xca, 0x01, 0xd8, 0x60, 0x10,
  0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x12, 0x50, 0x6d, 0x30, 0x8a, 0xff,
  0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa0, 0x36, 0x10, 0xc6, 0xff, 0xff,
  0xff, 0xff, 0x0f, 0x80, 0xb4, 0x81, 0x38, 0x20, 0xe0, 0x0c, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x86, 0x40, 0x18,
  0x26, 0x04, 0xc4, 0x84, 0xa0, 0x98, 0x10, 0x18, 0x13, 0x82, 0x03, 0x00,
  0x89, 0x20, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x32, 0x22, 0xc8, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x93, 0x23, 0xa4, 0x84, 0x04, 0x93, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8e, 0x8c, 0x0b, 0x84, 0xe4, 0x4c,
  0x10, 0xc0, 0xc3, 0x1c, 0x01, 0x18, 0x9c, 0x19, 0x48, 0x53, 0x44, 0x09,
  0x93, 0xbf, 0x02, 0xd8, 0x14, 0x01, 0x02, 0xd2, 0x18, 0x9a, 0x20, 0x10,
  0x0b, 0x11, 0x01, 0x13, 0xe2, 0x34, 0xec, 0x14, 0x51, 0xc2, 0x44, 0x45,
  0x04, 0x0a, 0x00, 0x14, 0x98, 0x01, 0x18, 0x46, 0x20, 0x86, 0x99, 0xc8,
  0x60, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x40, 0x16, 0x6e,
  0x81, 0x16, 0xca, 0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4,
  0x80, 0x14, 0xf8, 0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4,
  0x81, 0x0f, 0xcc, 0x81, 0x1d, 0xde, 0x21, 0x1c, 0xe8, 0x81, 0x0d, 0xc0,
  0x80, 0x0e, 0xfc, 0x00, 0x0c, 0xfc, 0x00, 0x05, 0x04, 0x2a, 0xdc, 0x25,
  0x4d, 0x11, 0x25, 0x4c, 0xfe, 0x0a, 0x60, 0x6d, 0x04, 0x08, 0x84, 0x49,
  0x48, 0x87, 0xd8, 0x14, 0x0e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x66, 0x42, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70,
  0x83, 0x59, 0xa0, 0x07, 0x79, 0xa8, 0x87, 0x71, 0xa0, 0x87, 0x7a, 0x90,
  0x87, 0x72, 0x20, 0x07, 0x51, 0xa8, 0x07, 0x73, 0x30, 0x87, 0x72, 0x90,
  0x07, 0x3e, 0x90, 0x85, 0x70, 0xc8, 0x07, 0x5a, 0x90, 0x87, 0x70, 0x18,
  0x87, 0x72, 0x68, 0x85, 0x72, 0x98, 0x07, 0x74, 0x48, 0x05, 0x77, 0x30,
  0x87, 0x77, 0xf0, 0x03, 0x14, 0x1c, 0x08, 0x71, 0x98, 0x34, 0x45, 0x94,
  0x30, 0xf9, 0x1b, 0x36, 0x11, 0xda, 0x30, 0x44, 0x84, 0x24, 0x6d, 0x54,
  0x51, 0x10, 0x11, 0x0a, 0x00, 0xa4, 0x98, 0x29, 0x0c, 0xc6, 0x81, 0x1d,
  0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e,
  0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xcc, 0x81, 0x1d,
  0xde, 0x21, 0x1c, 0xe8, 0xc1, 0x0f, 0xf4, 0x40, 0x0f, 0xda, 0x21, 0x1d,
  0xe0, 0x61, 0x1e, 0x7e, 0x81, 0x1e, 0xf2, 0x01, 0x1e, 0xca, 0x01, 0x05,
  0x80, 0x99, 0xac, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03,
  0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03,
  0x52, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0xf0, 0x03,
  0x24, 0x0c, 0x18, 0xd4, 0xb8, 0x49, 0x9a, 0x22, 0x4a, 0x98, 0x7c, 0x16,
  0x60, 0x9e, 0x85, 0x88, 0xd8, 0x09, 0x98, 0x08, 0x14, 0x00, 0xe8, 0x71,
  0x9d, 0x34, 0x45, 0x94, 0x30, 0xf9, 0x2c, 0xc0, 0x3c, 0x0b, 0x11, 0x71,
  0x0e, 0xf3, 0x00, 0x11, 0x22, 0x39, 0x0d, 0x3b, 0x01, 0x13, 0x81, 0x02,
  0x00, 0x45, 0x66, 0x6a, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87, 0x79,
  0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72,
  0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77,
  0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36,
  0x00, 0x03, 0x3a, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x3d, 0xd0, 0x83, 0x76,
  0x48, 0x07, 0x78, 0x98, 0x87, 0x5f, 0xa0, 0x87, 0x7c, 0x80, 0x87, 0x72,
  0x40, 0x01, 0x60, 0x26, 0x31, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98,
  0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28,
  0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78,
  0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60,
  0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0x02, 0x61, 0x42,
  0x94, 0x11, 0x80, 0x12, 0x58, 0xe8, 0x32, 0x47, 0x80, 0x50, 0xc6, 0x0c,
  0x00, 0x8c, 0x26, 0x01, 0x36, 0xc4, 0x19, 0x46, 0x18, 0x86, 0x24, 0x20,
  0x9c, 0x25, 0x2c, 0x80, 0x24, 0xf9, 0x0c, 0x30, 0x45, 0xc8, 0xe5, 0x17,
  0x8b, 0x03, 0x4c, 0x3e, 0xee, 0xe3, 0x28, 0xf8, 0x9c, 0x14, 0x22, 0x13,
  0x7b, 0x00, 0x03, 0x11, 0x71, 0x4e, 0x23, 0x4d, 0x40, 0x33, 0x49, 0xe8,
  0xf0, 0x78, 0x3c, 0x04, 0x10, 0x00, 0x40, 0xa1, 0x61, 0x04, 0x61, 0x38,
  0x48, 0x9a, 0x22, 0x4a, 0x98, 0xfc, 0x0e, 0x6b, 0x00, 0x06, 0x11, 0xb8,
  0x0d, 0x11, 0x20, 0x0f, 0x60, 0x74, 0x42, 0x50, 0xa3, 0x80, 0x44, 0xa5,
  0x43, 0x4c, 0x60, 0x22, 0x22, 0x04, 0x58, 0x50, 0x00, 0xa0, 0xd3, 0x45,
  0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xaf, 0x00, 0x96, 0x02, 0xd8, 0xe2, 0x00,
  0x03, 0x12, 0x00, 0x03, 0x4a, 0x1d, 0x1b, 0x48, 0x53, 0x44, 0x09, 0x93,
  0xbf, 0x51, 0xc8, 0x32, 0x89, 0x4d, 0x1b, 0x21, 0x40, 0x63, 0x2c, 0x84,
  0xd8, 0x4c, 0x44, 0x24, 0x11, 0xc2, 0x84, 0x38, 0x8d, 0x36, 0x4d, 0x11,
  0x12, 0x50, 0x13, 0x21, 0xa1, 0x60, 0x44, 0xab, 0x32, 0x58, 0x54, 0x2c,
  0x6a, 0x1d, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55,
  0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x88, 0xc1, 0x60, 0x30, 0xb8, 0x67,
  0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0x0f, 0x81, 0x66, 0x58, 0x08, 0x14,
  0x68, 0x0a, 0xf1, 0x02, 0xc0, 0x00, 0x14, 0x3b, 0x6a, 0xb8, 0xfc, 0x09,
  0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89, 0xc9, 0x47, 0x6e, 0x1b,
  0x11, 0x00, 0x00, 0x00, 0x50, 0x88, 0x19, 0x00, 0x06, 0x20, 0xda, 0x4d,
  0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0xfe, 0x4a, 0x48, 0x2b, 0x31, 0xf9,
  0xc8, 0x6d, 0xa3, 0x02, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xb0, 0x01, 0x60,
  0x00, 0x40, 0x06, 0x40, 0xb7, 0x9b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90,
  0xfc, 0x95, 0x90, 0x56, 0x62, 0xf2, 0x8b, 0xdb, 0x46, 0xc5, 0x60, 0x30,
  0x18, 0x00, 0x0a, 0x93, 0x03, 0xc0, 0x60, 0x83, 0xc1, 0x60, 0x00, 0x00,
  0x00, 0x06, 0xa4, 0x2b, 0xc8, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x83, 0x01,
  0xf1, 0xca, 0x30, 0x00, 0x0c, 0xc8, 0x57, 0x8a, 0x01, 0x60, 0x30, 0x18,
  0x10, 0xb0, 0x08, 0x03, 0x00, 0x09, 0x8b, 0x00, 0x00, 0x10, 0xb1, 0x0c,
  0x03, 0x40, 0x86, 0x8c, 0x65, 0x00, 0x00, 0x32, 0x84, 0x2c, 0x52, 0x0e,
  0x00, 0x83, 0x0d, 0x06, 0x83, 0x01, 0x00, 0x00, 0x18, 0x0c, 0x06, 0x83,
  0xc1, 0x60, 0x40, 0xca, 0xa2, 0xe4, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc4, 0x2c, 0x91, 0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0xc0,
  0x60, 0x30, 0x18, 0x0c, 0x06, 0x83, 0x81, 0x8a, 0x9c, 0x65, 0xb1, 0x00,
  0x60, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x32, 0x04, 0x2d, 0x03, 0x0c,
  0x10, 0x22, 0x69, 0x19, 0x60, 0x80, 0x12, 0x51, 0xcb, 0x00, 0x03, 0x9c,
  0xc8, 0x5a, 0x06, 0x18, 0x40, 0x41, 0xd8, 0x32, 0xc0, 0x00, 0x0d, 0xd2,
  0x96, 0x01, 0x06, 0x88, 0x10, 0xb7, 0x0c, 0x30, 0x00, 0x82, 0xbc, 0x65,
  0x80, 0x01, 0x28, 0x04, 0x2e, 0x03, 0x0c, 0xf0, 0x20, 0x71, 0x19, 0x60,
  0x80, 0x00, 0x91, 0xcb, 0x00, 0x03, 0x14, 0xc8, 0x3c, 0x10, 0x30, 0x47,
  0x10, 0x9c, 0x23, 0x4d, 0x11, 0x25, 0x4c, 0xfe, 0x0a, 0x60, 0x1d, 0x21,
  0x09, 0x88, 0xf0, 0x0c, 0x3c, 0x83, 0x39, 0x02, 0x50, 0xa0, 0x01, 0x01,
  0xa6, 0x00, 0x68, 0x04, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f,
  0xc4, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0x06, 0x03, 0x00, 0x66, 0x31,
  0x00, 0x60, 0x22, 0x03, 0x00, 0xa6, 0x32, 0x00, 0x60, 0x2a, 0x03, 0x00,
  0x66, 0x33, 0x00, 0x60, 0x36, 0x03, 0x00, 0xe6, 0x33, 0x00, 0x60, 0x46,
  0x03, 0x00, 0x26, 0x35, 0x00, 0x60, 0x52, 0x03, 0x00, 0x26, 0x35, 0x00,
  0x60, 0x72, 0x42, 0x2c, 0x08, 0x18, 0x0e, 0x00, 0x80, 0xe5, 0x00, 0x00,
  0x78, 0x0e, 0x00, 0x60, 0xc8, 0xd3, 0x06, 0x00, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x89, 0x03, 0x20, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0xd0, 0x01, 0x10,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xee,
  0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86,
  0x3c, 0x7a, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x1e, 0x3e, 0x00, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x8f, 0x1f, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x14, 0x80, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x23, 0x0a, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x21, 0x05,
  0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2,
  0x98, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x79, 0x4c, 0x01, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0xa8, 0x00, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x55, 0x00, 0x02, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x2b, 0x00, 0x01, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xc7, 0x15, 0x80,
  0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x03,
  0x0b, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0xe4, 0x91, 0x05, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0xf2, 0xd0, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x6c, 0x01, 0x08, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0xb8, 0x00, 0x04, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x5d, 0x00, 0x02,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x2f,
  0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0xc7, 0x17, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x03, 0x0e, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0xe4, 0x11, 0x07, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x90, 0x03, 0x10, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xcc, 0x01, 0x08, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0x40, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x1c, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x02, 0x94, 0x40, 0x19, 0x14,
  0x42, 0x31, 0x8c, 0x00, 0x14, 0x48, 0x61, 0x14, 0x50, 0x11, 0x94, 0x45,
  0x49, 0x94, 0x42, 0x39, 0x14, 0x44, 0x69, 0x14, 0xa4, 0x40, 0xc1, 0x06,
  0x14, 0x60, 0x40, 0x61, 0x06, 0x14, 0x68, 0x40, 0xa1, 0x14, 0x4c, 0xe1,
  0x14, 0x58, 0x01, 0x0a, 0x14, 0xa2, 0x40, 0x51, 0xd0, 0x7a, 0x04, 0xa0,
  0x40, 0x01, 0x13, 0x28, 0x3d, 0x02, 0x40, 0x88, 0x19, 0x00, 0x52, 0xcc,
  0x00, 0x10, 0x63, 0x06, 0x80, 0x1a, 0x33, 0x00, 0x34, 0x99, 0x01, 0x20,
  0xca, 0x0c, 0x00, 0x71, 0x46, 0x00, 0x28, 0x34, 0x03, 0x40, 0xa4, 0x19,
  0x00, 0x2a, 0xcd, 0x00, 0xd0, 0x69, 0x06, 0x80, 0x52, 0x33, 0x00, 0xb4,
  0x9a, 0x01, 0xa0, 0xc3, 0x0c, 0x00, 0xa9, 0x67, 0x00, 0xa8, 0x30, 0x03,
  0x40, 0x81, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0xd9, 0x01, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x83, 0x0c, 0x6f, 0x0c, 0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10,
  0x00, 0x36, 0x98, 0x20, 0x00, 0x6d, 0xb0, 0x41, 0x18, 0x88, 0x09, 0x02,
  0xe0, 0x06, 0x1b, 0x84, 0xc1, 0xe0, 0xc0, 0x96, 0x26, 0x36, 0x41, 0x00,
  0xde, 0x60, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x01, 0x80, 0x83, 0x09, 0x82,
  0x00, 0xf0, 0x38, 0xfb, 0x0a, 0x1b, 0x1b, 0x2b, 0x63, 0x9b, 0x20, 0x00,
  0x71, 0xb0, 0x41, 0x58, 0x8c, 0x0d, 0xc9, 0xc2, 0x34, 0xcb, 0x32, 0x38,
  0xcb, 0x33, 0x41, 0x48, 0x04, 0x2a, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x68,
  0x49, 0x6e, 0x66, 0x6f, 0x13, 0x04, 0x40, 0x0e, 0x26, 0x08, 0xc0, 0x1c,
  0x6c, 0x10, 0x06, 0x6a, 0x43, 0x32, 0x44, 0xd2, 0x32, 0x0c, 0xd3, 0x52,
  0x4d, 0x10, 0x00, 0x3a, 0x98, 0x20, 0x2c, 0x03, 0x93, 0xb3, 0xaf, 0x34,
  0x37, 0xb2, 0xb4, 0xb1, 0xb2, 0xb9, 0x09, 0x02, 0x50, 0x07, 0x1b, 0x92,
  0x0b, 0xcb, 0x96, 0x6b, 0xd0, 0x16, 0x60, 0x82, 0xb0, 0x10, 0x64, 0xce,
  0xbe, 0xc2, 0xe8, 0xe8, 0xe4, 0xd2, 0xc4, 0xea, 0xe8, 0xca, 0xe6, 0x36,
  0x24, 0x04, 0xd7, 0x2d, 0xc4, 0xa0, 0x2d, 0xc0, 0x04, 0xc1, 0x29, 0x98,
  0xd0, 0x95, 0xe1, 0x4d, 0xa1, 0x85, 0x91, 0xbd, 0xdd, 0x4d, 0x10, 0x00,
  0x3b, 0xd8, 0x20, 0x2c, 0x61, 0xb0, 0x21, 0x31, 0x3e, 0x30, 0x58, 0x8c,
  0xe1, 0x5a, 0xc4, 0x60, 0x82, 0x00, 0xdc, 0xc1, 0x04, 0xc1, 0x31, 0x78,
  0xd0, 0x95, 0xe1, 0x4d, 0x4d, 0x05, 0x3d, 0x6d, 0x48, 0xc8, 0xa0, 0x0c,
  0xcc, 0x60, 0x21, 0x83, 0xe1, 0x5a, 0xc4, 0x60, 0x82, 0x50, 0x25, 0x74,
  0xce, 0xbe, 0xd8, 0xde, 0xc6, 0xc2, 0xd8, 0xa8, 0xca, 0xf0, 0xe8, 0xea,
  0xe4, 0xca, 0x36, 0x24, 0x09, 0x1a, 0xa4, 0xc1, 0x92, 0x0c, 0xd7, 0x22,
  0x06, 0x13, 0x04, 0x00, 0x0f, 0x26, 0x08, 0x95, 0xc2, 0xe6, 0xec, 0x8b,
  0xed, 0x6d, 0x2c, 0x8c, 0xcd, 0xe9, 0x4d, 0xae, 0x2d, 0x8c, 0x6d, 0x43,
  0xb2, 0x06, 0x6c, 0xd0, 0x06, 0xcb, 0x1a, 0x0c, 0xd7, 0x22, 0x06, 0x13,
  0x04, 0x20, 0x0f, 0x26, 0x08, 0xd5, 0xc2, 0xc3, 0xed, 0x4d, 0xae, 0x2d,
  0x8c, 0x6d, 0x6e, 0x82, 0x00, 0xe8, 0xc1, 0x86, 0xe4, 0x0d, 0xe0, 0x20,
  0x0e, 0x16, 0x39, 0x18, 0xae, 0x45, 0x0c, 0x36, 0x24, 0x90, 0xb5, 0x79,
  0x63, 0x70, 0x06, 0x6a, 0xe0, 0x06, 0x73, 0x30, 0x41, 0x30, 0x02, 0x3a,
  0x67, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x70,
  0x75, 0x74, 0x13, 0x84, 0x74, 0x48, 0x85, 0x0d, 0xcb, 0x52, 0x07, 0x76,
  0xb0, 0x5c, 0xc3, 0x75, 0x07, 0x77, 0x70, 0x07, 0x62, 0xb0, 0x21, 0xc0,
  0x83, 0x09, 0x82, 0x18, 0x34, 0x94, 0x90, 0xd2, 0xe8, 0xa6, 0xd0, 0xc2,
  0xc8, 0xca, 0xe4, 0x86, 0xde, 0xdc, 0xe6, 0xe8, 0xc2, 0xdc, 0xe8, 0xe6,
  0x26, 0x08, 0xc0, 0x1e, 0x6c, 0x40, 0x16, 0x3d, 0xd8, 0x83, 0x65, 0x19,
  0xf8, 0x00, 0x98, 0x20, 0x98, 0x81, 0x43, 0x41, 0x2c, 0x66, 0x82, 0x00,
  0xf0, 0xc1, 0x06, 0x64, 0xf0, 0x83, 0x3f, 0x58, 0x86, 0x01, 0x14, 0x80,
  0x09, 0x02, 0x1a, 0x3c, 0x44, 0x9a, 0xc2, 0xe8, 0xca, 0xe4, 0xd2, 0xc2,
  0xd8, 0x36, 0x20, 0x97, 0x28, 0x8c, 0xc2, 0x42, 0x0c, 0x06, 0xb0, 0x61,
  0xe8, 0x83, 0x50, 0x20, 0x85, 0x09, 0x02, 0x74, 0x90, 0x38, 0xfb, 0x9a,
  0x83, 0xd9, 0x80, 0x2c, 0xa6, 0x70, 0x0a, 0xcb, 0x32, 0x2c, 0xc0, 0x04,
  0x41, 0x42, 0xd8, 0xcc, 0xa1, 0x85, 0x91, 0xbd, 0xdd, 0x4d, 0x85, 0xb5,
  0xc1, 0xb1, 0x95, 0xc9, 0x6d, 0x40, 0x86, 0x54, 0x50, 0x85, 0x65, 0x18,
  0x06, 0x60, 0x83, 0x80, 0x0a, 0xab, 0xb0, 0x81, 0xa0, 0x83, 0x3c, 0x28,
  0x05, 0x56, 0x98, 0x20, 0x04, 0xba, 0xc0, 0x00, 0x6d, 0x83, 0x91, 0xbc,
  0x02, 0xb1, 0xac, 0x81, 0xb1, 0x41, 0x30, 0x60, 0x61, 0x82, 0x50, 0xe4,
  0xc2, 0x06, 0x23, 0x79, 0x05, 0x62, 0x59, 0x83, 0x30, 0xd8, 0x20, 0x38,
  0xb3, 0x30, 0x41, 0x20, 0x03, 0x59, 0x60, 0x33, 0x16, 0xd6, 0x56, 0x26,
  0x17, 0x46, 0xf5, 0x76, 0xf5, 0x26, 0xc7, 0x46, 0xb6, 0x61, 0x30, 0x8c,
  0x61, 0x03, 0x92, 0xd8, 0xc2, 0x75, 0x0b, 0xc4, 0xb2, 0x06, 0x61, 0xc0,
  0xe9, 0xee, 0x4d, 0x8e, 0x8d, 0x6c, 0x28, 0xac, 0xad, 0x4c, 0x2e, 0x0c,
  0xea, 0x6d, 0x2e, 0x8d, 0x2e, 0xed, 0xcd, 0x6d, 0x82, 0x00, 0xf4, 0xc1,
  0x06, 0x23, 0xc9, 0x05, 0x42, 0x17, 0xd6, 0x20, 0x0c, 0x78, 0xc0, 0x85,
  0x91, 0x91, 0xa5, 0xb9, 0x9d, 0x4d, 0x10, 0x00, 0x3f, 0xd8, 0x60, 0x24,
  0xbc, 0x40, 0xf4, 0xc2, 0x1a, 0x90, 0x01, 0x15, 0xb9, 0xb2, 0xb9, 0x37,
  0xb6, 0x3a, 0xba, 0xb4, 0x37, 0xb7, 0x09, 0x02, 0xf0, 0x07, 0x1b, 0x8c,
  0xe4, 0x17, 0x08, 0x70, 0x58, 0x83, 0x30, 0xd8, 0x50, 0x80, 0x02, 0x2e,
  0xec, 0x82, 0x2f, 0x84, 0xc3, 0x04, 0x01, 0x51, 0x85, 0x0d, 0x44, 0xf2,
  0x0a, 0xc4, 0xb2, 0x41, 0xa0, 0xc8, 0x61, 0x82, 0x70, 0xdc, 0x02, 0xa5,
  0xb6, 0xaf, 0x34, 0x37, 0xb2, 0x32, 0xbc, 0x27, 0x33, 0xb3, 0xb9, 0x32,
  0x3a, 0xa1, 0x3c, 0xba, 0xb2, 0xb9, 0x0d, 0x46, 0x72, 0x0e, 0xc4, 0xb2,
  0x06, 0x64, 0x40, 0xac, 0xed, 0xab, 0xce, 0x2e, 0x88, 0x8e, 0x4e, 0x2e,
  0x4d, 0xac, 0x8e, 0xae, 0xec, 0xc9, 0xcc, 0x6c, 0xae, 0x8c, 0x4e, 0x28,
  0x8f, 0xae, 0x6c, 0x6e, 0x83, 0x91, 0xa4, 0x03, 0x61, 0xac, 0x01, 0x19,
  0x90, 0x6b, 0xfb, 0x72, 0x7b, 0x93, 0x6b, 0x0b, 0x63, 0x0b, 0xa2, 0xa3,
  0x93, 0x4b, 0x13, 0xab, 0xa3, 0x2b, 0x7b, 0x32, 0x33, 0x9b, 0x2b, 0xa3,
  0x13, 0xca, 0xa3, 0x2b, 0x9b, 0xdb, 0x60, 0x24, 0xeb, 0x40, 0xbc, 0xc1,
  0x1a, 0x90, 0x01, 0xbb, 0xb6, 0x2f, 0xba, 0x30, 0xb7, 0xb3, 0x32, 0x37,
  0xba, 0x20, 0x3a, 0x3a, 0xb9, 0x34, 0xb1, 0x3a, 0xba, 0xb2, 0x27, 0x33,
  0xb3, 0xb9, 0x32, 0x3a, 0xa1, 0x3c, 0xba, 0xb2, 0xb9, 0x0d, 0x46, 0xd2,
  0x0e, 0xc4, 0xb4, 0x06, 0x64, 0xc0, 0xaf, 0xed, 0x4b, 0x2c, 0x8d, 0x2e,
  0xcc, 0xed, 0xac, 0xcc, 0x8d, 0x2e, 0x88, 0x8e, 0x4e, 0x2e, 0x4d, 0xac,
  0x8e, 0xae, 0xec, 0xc9, 0xcc, 0x6c, 0xae, 0x8c, 0x4e, 0x28, 0x8f, 0xae,
  0x6c, 0x6e, 0x83, 0x91, 0xbc, 0x03, 0xe1, 0xac, 0x01, 0x19, 0xd0, 0x6b,
  0xfb, 0x82, 0x7b, 0x9b, 0x4b, 0xa3, 0x4b, 0x7b, 0x73, 0x0b, 0xa2, 0xa3,
  0x93, 0x4b, 0x13, 0xab, 0xa3, 0x2b, 0x7b, 0x32, 0x33, 0x9b, 0x2b, 0xa3,
  0x13, 0xca, 0xa3, 0x2b, 0x9b, 0x9b, 0x20, 0x00, 0xa0, 0xb0, 0xc1, 0x48,
  0xe2, 0x81, 0x90, 0x87, 0x35, 0x20, 0x03, 0x5a, 0x6d, 0x5f, 0x61, 0x74,
  0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x64,
  0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x13, 0x04, 0x20, 0x14, 0x36, 0x18,
  0x09, 0x3d, 0x10, 0xf5, 0xb0, 0x06, 0x64, 0x40, 0xaa, 0xed, 0xab, 0x2d,
  0x8c, 0xae, 0x4c, 0x2e, 0x2d, 0x8c, 0x2d, 0xc9, 0x6d, 0x8e, 0x2e, 0xcc,
  0x6d, 0xac, 0x2c, 0x89, 0x6c, 0x82, 0x00, 0x88, 0xc2, 0x06, 0x23, 0xb9,
  0x07, 0x02, 0x1f, 0xd6, 0x80, 0x0c, 0x36, 0x24, 0x14, 0x3a, 0xa8, 0x03,
  0x3b, 0xb8, 0x03, 0x3c, 0xcc, 0x83, 0x3d, 0xe4, 0xc3, 0x04, 0x41, 0x59,
  0x85, 0x09, 0x42, 0xd3, 0x0a, 0x24, 0xda, 0xd2, 0xe0, 0xe6, 0x36, 0x10,
  0x49, 0x3f, 0x10, 0xc6, 0x86, 0xe1, 0x0d, 0x66, 0xc1, 0x1f, 0x26, 0x08,
  0x0c, 0x2b, 0xd0, 0x40, 0x0b, 0x73, 0x23, 0x63, 0x2b, 0xdb, 0x60, 0x24,
  0x21, 0x41, 0x2c, 0x6b, 0x40, 0x06, 0x1b, 0x04, 0x43, 0x24, 0x26, 0x08,
  0xd4, 0x2b, 0x6c, 0x20, 0x92, 0x7e, 0x20, 0x9c, 0x0d, 0x83, 0x3c, 0xcc,
  0x42, 0x49, 0x4c, 0x10, 0x26, 0x57, 0x98, 0x20, 0xa4, 0x41, 0x2d, 0x70,
  0x99, 0x5a, 0x4b, 0x83, 0x9b, 0x42, 0x0b, 0x23, 0x4b, 0x73, 0x3b, 0xdb,
  0x60, 0x24, 0x29, 0x41, 0x2c, 0x6b, 0x30, 0xf0, 0x90, 0x0a, 0xcb, 0x43,
  0x4a, 0xa3, 0xa3, 0xda, 0x60, 0x24, 0x2b, 0x41, 0x18, 0x6b, 0x10, 0x06,
  0x1b, 0x86, 0x37, 0x50, 0x09, 0x96, 0x98, 0x20, 0xac, 0x81, 0x2d, 0x90,
  0x11, 0x0b, 0x93, 0xcb, 0x1b, 0x2b, 0x73, 0xa3, 0x93, 0x4b, 0x1b, 0x9b,
  0xdb, 0x60, 0x24, 0x2f, 0x41, 0x2c, 0x6b, 0x10, 0x06, 0x1b, 0x84, 0x37,
  0x80, 0x89, 0x09, 0x82, 0x3a, 0xe0, 0x02, 0x8d, 0x27, 0xb9, 0xb4, 0xb3,
  0x34, 0xb7, 0x0d, 0x46, 0x32, 0x13, 0xc4, 0xb2, 0x06, 0x61, 0x40, 0x82,
  0xaa, 0x29, 0xcd, 0x6d, 0x83, 0x91, 0xd4, 0x04, 0x31, 0xad, 0x41, 0x18,
  0x30, 0x21, 0x4a, 0x93, 0x2b, 0x1b, 0xa3, 0x4b, 0x7b, 0x73, 0xdb, 0x60,
  0x24, 0x37, 0x41, 0x38, 0x6b, 0x10, 0x06, 0x24, 0xa8, 0x9a, 0xc2, 0xf0,
  0x36, 0x18, 0x49, 0x4e, 0x10, 0xf8, 0xb0, 0x06, 0x61, 0xb0, 0xa1, 0xa0,
  0x68, 0xc2, 0x26, 0x70, 0x42, 0x27, 0x26, 0x08, 0x61, 0x10, 0x0b, 0x64,
  0xa6, 0xea, 0xdc, 0x88, 0xd2, 0xe4, 0xca, 0xc6, 0xe8, 0xd2, 0xde, 0xdc,
  0x36, 0x18, 0x49, 0x4f, 0x10, 0xcb, 0x1a, 0x84, 0x01, 0x91, 0xa9, 0x3a,
  0xb7, 0xa1, 0x37, 0xb6, 0x37, 0xb9, 0x0d, 0x46, 0xf2, 0x13, 0x84, 0xb3,
  0x06, 0x61, 0x40, 0x26, 0xa8, 0x4d, 0x2c, 0xad, 0xcc, 0x8d, 0x6e, 0xe8,
  0x8d, 0xed, 0x4d, 0x6e, 0x83, 0x91, 0x84, 0x05, 0x41, 0xad, 0x41, 0x18,
  0xf0, 0x99, 0x42, 0x0b, 0x23, 0x7b, 0xbb, 0xa3, 0x2a, 0xc3, 0x2b, 0x63,
  0x9b, 0x4a, 0xd3, 0x2b, 0x9b, 0x20, 0x00, 0xa3, 0xb0, 0xc1, 0x48, 0xc6,
  0x82, 0x20, 0x8b, 0x35, 0x08, 0x03, 0x36, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
  0x54, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x1b, 0x90, 0xc4, 0x2c,
  0xae, 0x5b, 0x20, 0x74, 0x61, 0x0d, 0xc2, 0x80, 0x4c, 0xd2, 0x9c, 0x54,
  0x99, 0x19, 0x5b, 0xd9, 0x18, 0x5d, 0xda, 0x9b, 0xdb, 0x04, 0x01, 0x20,
  0x85, 0x0d, 0x46, 0x82, 0x16, 0x44, 0x5a, 0xac, 0x01, 0x19, 0xb0, 0xa9,
  0x9a, 0x2b, 0x9b, 0x42, 0x0b, 0x23, 0x7b, 0xbb, 0x93, 0x0a, 0xcb, 0x9b,
  0x9b, 0x20, 0x00, 0xa5, 0xb0, 0xc1, 0x48, 0xd6, 0x82, 0x60, 0x8b, 0x35,
  0x20, 0x83, 0x0d, 0x08, 0x1f, 0xf8, 0x04, 0x58, 0x88, 0x45, 0x59, 0x9c,
  0x85, 0x5a, 0xb4, 0xc5, 0x04, 0xa1, 0x0c, 0x66, 0x81, 0xc9, 0xd9, 0x17,
  0x59, 0x9e, 0x5b, 0x58, 0x5b, 0xda, 0xd8, 0x06, 0x22, 0x81, 0x0b, 0x62,
  0xd9, 0x20, 0x80, 0x42, 0x5c, 0x4c, 0x10, 0xce, 0x80, 0x16, 0xa8, 0x34,
  0x85, 0xd1, 0x95, 0xc9, 0xa5, 0x85, 0xb1, 0x25, 0x11, 0x6d, 0x30, 0x12,
  0xba, 0x20, 0x96, 0x35, 0x20, 0x83, 0x0d, 0x82, 0x51, 0x17, 0x1b, 0xc2,
  0x60, 0x71, 0x85, 0x58, 0x90, 0x05, 0x5a, 0xa8, 0x05, 0x71, 0x18, 0x87,
  0x72, 0x30, 0x07, 0x7d, 0xd8, 0x87, 0x58, 0xe0, 0x87, 0x7f, 0x00, 0x89,
  0x91, 0x20, 0x09, 0x93, 0x38, 0x89, 0x91, 0x40, 0x89, 0x96, 0x70, 0x89,
  0x98, 0x90, 0x89, 0x9d, 0xe0, 0x09, 0xb7, 0x78, 0x0b, 0xb9, 0x98, 0x0b,
  0xbb, 0x98, 0x20, 0xb8, 0x01, 0xb4, 0x01, 0xd8, 0x30, 0x0c, 0x79, 0x91,
  0x17, 0x1b, 0x86, 0x2b, 0x2f, 0xf2, 0x62, 0xc3, 0xb0, 0xe4, 0x45, 0x5e,
  0x6c, 0x18, 0xf4, 0x62, 0x2f, 0xf8, 0x62, 0xc3, 0x30, 0xe0, 0x45, 0x5f,
  0x10, 0x98, 0x20, 0xac, 0x03, 0x2a, 0x6c, 0x10, 0x16, 0xd0, 0xd8, 0x50,
  0x00, 0x7f, 0x01, 0xb4, 0x42, 0x68, 0x30, 0x14, 0x02, 0x7e, 0x90, 0xd2,
  0xe8, 0x80, 0x80, 0xb2, 0x82, 0xb0, 0xaa, 0xa4, 0xc2, 0xf2, 0xa0, 0xc2,
  0xf2, 0xd8, 0xde, 0xc2, 0xc8, 0x80, 0x80, 0xaa, 0x84, 0xea, 0xd2, 0xd8,
  0xe8, 0x92, 0xdc, 0xa8, 0xe4, 0xd2, 0xc2, 0xdc, 0xce, 0xd8, 0xca, 0x92,
  0xdc, 0xe8, 0xca, 0xe4, 0xe6, 0xca, 0xc6, 0xe8, 0xd2, 0xde, 0xdc, 0x82,
  0xe8, 0xe8, 0xe4, 0xd2, 0xc4, 0xea, 0xe8, 0xca, 0xe6, 0x80, 0x80, 0x80,
  0xb4, 0x26, 0x08, 0x80, 0x29, 0x6c, 0x08, 0x96, 0x0d, 0xc8, 0x1b, 0x90,
  0x46, 0xf2, 0x06, 0x6b, 0xf0, 0x06, 0x64, 0x50, 0x1a, 0x1b, 0x0a, 0xbc,
  0x18, 0x0d, 0x00, 0x30, 0x0d, 0x16, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x7c,
  0xde, 0xda, 0xdc, 0xd2, 0xe0, 0xde, 0xe8, 0xca, 0xdc, 0xe8, 0x40, 0xc6,
  0xd0, 0xc2, 0xe4, 0x18, 0x4d, 0xa5, 0xb5, 0xc1, 0xb1, 0x95, 0x81, 0x0c,
  0xbd, 0x0c, 0xad, 0xac, 0x80, 0x50, 0x09, 0x05, 0x05, 0x6d, 0x08, 0x54,
  0x63, 0x82, 0xb0, 0x0e, 0xa7, 0xb0, 0x61, 0x48, 0x8d, 0xd5, 0x60, 0x8d,
  0x0d, 0x03, 0x6a, 0xb4, 0x06, 0x6b, 0x6c, 0x18, 0x5c, 0xc3, 0x35, 0x58,
  0x83, 0x84, 0xd8, 0xdb, 0x1b, 0xdb, 0x86, 0x01, 0x36, 0x5a, 0x83, 0x35,
  0x36, 0x0c, 0xb1, 0x11, 0x1b, 0xac, 0xb1, 0x41, 0x58, 0xae, 0x2a, 0x6c,
  0x6c, 0x76, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x82, 0xa0,
  0x0a, 0x19, 0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b, 0xdb, 0x94,
  0x80, 0x68, 0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57, 0x26, 0x37,
  0x25, 0x30, 0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91, 0x95, 0xc9,
  0x35, 0xbd, 0x91, 0x95, 0xb1, 0x4d, 0x09, 0x92, 0x32, 0x64, 0x78, 0x2e,
  0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x02, 0x56,
  0xa8, 0x44, 0x86, 0xe7, 0x42, 0x97, 0x07, 0x57, 0x16, 0xe4, 0xe6, 0xf6,
  0x46, 0x17, 0x46, 0x97, 0xf6, 0xe6, 0x36, 0x37, 0x45, 0xb0, 0x8b, 0xbe,
  0xa8, 0x43, 0x86, 0xe7, 0x52, 0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5, 0x96,
  0xe6, 0x46, 0x37, 0x37, 0x45, 0x08, 0x0d, 0xd3, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x8c, 0xcc, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x74, 0x60, 0x07, 0x37, 0x90, 0x87, 0x72, 0x98, 0x87, 0x77, 0xa8,
  0x07, 0x79, 0x18, 0x87, 0x72, 0x70, 0x83, 0x70, 0xa0, 0x07, 0x7a, 0x90,
  0x87, 0x74, 0x10, 0x87, 0x7a, 0xa0, 0x87, 0x72, 0x00, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x35, 0x30, 0x06, 0x81,
  0xdf, 0xf9, 0x9b, 0x76, 0x93, 0xd3, 0xe3, 0xf2, 0x1c, 0x08, 0x9c, 0x55,
  0x85, 0x79, 0x7a, 0x39, 0x48, 0x26, 0xcb, 0xcb, 0xf3, 0xb9, 0xb0, 0x6e,
  0x36, 0x97, 0xe5, 0x40, 0x60, 0xd0, 0x2e, 0xa4, 0xe1, 0xf2, 0x9d, 0xc7,
  0x9f, 0x88, 0x68, 0x42, 0x80, 0x08, 0xf3, 0x8b, 0xdb, 0xb6, 0x88, 0x6d,
  0xb8, 0x7c, 0xe7, 0xf1, 0x85, 0x80, 0x2a, 0x0a, 0x22, 0x2a, 0x1d, 0x60,
  0x28, 0x09, 0x03, 0x10, 0x30, 0xbf, 0xb8, 0xed, 0x3a, 0xc8, 0x02, 0xbf,
  0xf3, 0x77, 0x0e, 0x03, 0x02, 0x67, 0xd5, 0x69, 0xb8, 0x0d, 0x67, 0x97,
  0xe5, 0x53, 0x7a, 0x98, 0x5e, 0x06, 0x02, 0x83, 0x65, 0xd0, 0x05, 0x7e,
  0xf4, 0x32, 0x7e, 0x3a, 0x0d, 0x3e, 0x81, 0xc0, 0x99, 0xf5, 0x47, 0xa2,
  0x96, 0xf1, 0xf4, 0xba, 0xbc, 0x2c, 0x23, 0x02, 0x9b, 0x40, 0x60, 0xd0,
  0x48, 0xe2, 0x60, 0xb8, 0x7c, 0xe7, 0xf1, 0x85, 0x88, 0x00, 0x26, 0x22,
  0x04, 0x9a, 0x61, 0x21, 0x3e, 0x27, 0x2a, 0x91, 0xc0, 0x97, 0xa6, 0x88,
  0x12, 0x26, 0x7f, 0xc3, 0x26, 0x42, 0x1b, 0x86, 0x88, 0x90, 0xa4, 0x8d,
  0x2a, 0x0a, 0x22, 0x32, 0x0a, 0x6e, 0xb8, 0x7c, 0xe7, 0xf1, 0x25, 0x80,
  0x79, 0x16, 0x82, 0x63, 0x9e, 0x92, 0xa8, 0x88, 0x65, 0x26, 0x22, 0xc7,
  0x2f, 0x6e, 0xdb, 0x36, 0xb0, 0xe1, 0xf2, 0x9d, 0xc7, 0xb7, 0x9c, 0x68,
  0x19, 0x56, 0x00, 0x43, 0x23, 0xc4, 0x40, 0x1a, 0xbf, 0xb8, 0x6d, 0x03,
  0xb1, 0x86, 0xcb, 0x77, 0x1e, 0x7f, 0x22, 0xae, 0x89, 0x8a, 0x08, 0x76,
  0x72, 0x22, 0xc2, 0x2f, 0x6e, 0xdb, 0x38, 0xb6, 0xe1, 0xf2, 0x9d, 0xc7,
  0x1f, 0x10, 0xe9, 0x01, 0x26, 0xe1, 0x58, 0x01, 0x4c, 0x12, 0x9b, 0x81,
  0xb8, 0x7c, 0xe4, 0xb6, 0x0d, 0xa3, 0x1a, 0x2e, 0xdf, 0x79, 0xfc, 0x08,
  0xc0, 0x5a, 0x8e, 0x8a, 0x22, 0xa2, 0x99, 0xfc, 0xe2, 0xb6, 0x2b, 0xa0,
  0x0e, 0x02, 0xbf, 0xf3, 0x77, 0x3e, 0x96, 0x97, 0xcb, 0xee, 0x67, 0x9d,
  0x0e, 0xaf, 0xd3, 0x81, 0xc0, 0x99, 0xf5, 0x47, 0x92, 0x5e, 0xa9, 0x65,
  0x3c, 0xbd, 0x2e, 0x2f, 0xcb, 0x88, 0x40, 0xeb, 0x8f, 0x64, 0x2f, 0x8f,
  0xe9, 0x6f, 0x39, 0xb0, 0x49, 0x82, 0xcd, 0x80, 0x40, 0x20, 0x30, 0x58,
  0x2b, 0x7d, 0x40, 0xc6, 0xbb, 0xde, 0x70, 0xd7, 0x58, 0x5e, 0x0e, 0xd3,
  0xcb, 0xc8, 0xb0, 0x9b, 0xcc, 0x2e, 0x1b, 0xdf, 0x72, 0x66, 0x5a, 0xec,
  0x1a, 0xb3, 0xc3, 0xf3, 0xb9, 0x4b, 0x7a, 0xa5, 0x96, 0xf1, 0xf4, 0xba,
  0xbc, 0x2c, 0x23, 0xf2, 0xec, 0xe5, 0x31, 0xfd, 0x2d, 0xe7, 0x99, 0xd9,
  0xef, 0x30, 0x9d, 0x05, 0xa2, 0xf9, 0x40, 0xbe, 0x4a, 0x98, 0x83, 0xc0,
  0xef, 0xfc, 0x65, 0xbf, 0xc7, 0x61, 0x36, 0xb5, 0x8c, 0xa7, 0xd7, 0xe5,
  0x65, 0x20, 0x70, 0x66, 0xfd, 0x91, 0xa8, 0x65, 0x3c, 0xbd, 0x2e, 0x2f,
  0xcb, 0x88, 0x40, 0xeb, 0x8f, 0x64, 0x2f, 0x8f, 0xe9, 0x6f, 0x39, 0xb0,
  0x49, 0x82, 0xcd, 0x80, 0x40, 0x20, 0x30, 0x68, 0x13, 0xd7, 0x70, 0xf9,
  0xce, 0xe3, 0x47, 0x80, 0xb5, 0x51, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c,
  0x3e, 0x72, 0xdb, 0x55, 0xf0, 0x05, 0x7e, 0xf4, 0x32, 0x7e, 0x8a, 0x0e,
  0x93, 0xdf, 0x77, 0x20, 0x70, 0x66, 0xfd, 0x91, 0xa8, 0x65, 0x3c, 0xbd,
  0x2e, 0x2f, 0xcb, 0x88, 0xc0, 0x26, 0x10, 0x18, 0x34, 0x91, 0x6d, 0xb8,
  0x7c, 0xe7, 0xf1, 0x85, 0x88, 0x00, 0x26, 0x22, 0x04, 0x9a, 0x61, 0x21,
  0x3e, 0x27, 0x2a, 0x91, 0xc0, 0x0f, 0x6a, 0x0b, 0x59, 0x83, 0xe1, 0xf2,
  0x9d, 0xc7, 0x17, 0x22, 0x02, 0x98, 0x88, 0x10, 0x68, 0x86, 0x85, 0xf8,
  0x9c, 0xa8, 0x44, 0x02, 0x3f, 0x44, 0x26, 0xf6, 0x00, 0x06, 0x22, 0xe2,
  0x9c, 0x46, 0x9a, 0x80, 0x66, 0x92, 0xac, 0x83, 0x1a, 0x2e, 0xdf, 0x79,
  0x7c, 0x09, 0x60, 0x9e, 0x85, 0x00, 0x23, 0x60, 0xf0, 0x8b, 0xdb, 0xb6,
  0x0c, 0x6c, 0xb8, 0x7c, 0xe7, 0xf1, 0x9f, 0x08, 0x61, 0x90, 0x09, 0xa9,
  0x08, 0xb1, 0x19, 0x88, 0xcb, 0x47, 0x6e, 0xbb, 0x08, 0xcc, 0x20, 0xf0,
  0x3b, 0x7f, 0xc3, 0x74, 0xba, 0x3c, 0x2d, 0xae, 0xd3, 0xcb, 0x73, 0x20,
  0x70, 0x56, 0x15, 0xe6, 0xe9, 0xe5, 0x20, 0x99, 0x2c, 0x2f, 0xcf, 0xe7,
  0xc2, 0xba, 0xd9, 0x5c, 0x96, 0x03, 0x81, 0xc1, 0x52, 0x90, 0x83, 0xc0,
  0xef, 0xfc, 0x65, 0xbf, 0xc7, 0x61, 0xb6, 0xf3, 0x2d, 0x6f, 0x87, 0xd9,
  0x40, 0xe0, 0xcc, 0xfa, 0x23, 0x51, 0xcb, 0x78, 0x7a, 0x5d, 0x5e, 0x96,
  0x11, 0x81, 0xd6, 0x1f, 0xc9, 0x5e, 0x1e, 0xd3, 0xdf, 0x72, 0x60, 0x93,
  0x04, 0x9b, 0x01, 0x81, 0x40, 0x60, 0xb0, 0x00, 0xde, 0x20, 0xf0, 0x3b,
  0x7f, 0xc3, 0xe3, 0x71, 0x99, 0x0d, 0x04, 0xce, 0xaa, 0xd2, 0x70, 0x9e,
  0x2e, 0x0f, 0x8f, 0xd3, 0xee, 0x73, 0x70, 0x3c, 0x2e, 0xb3, 0xcb, 0xf2,
  0x30, 0x3d, 0xfd, 0x76, 0x4f, 0xe9, 0xf2, 0xfa, 0x98, 0x5e, 0x97, 0x97,
  0x81, 0xc0, 0x60, 0x41, 0x84, 0x42, 0xe0, 0x87, 0x4c, 0xd3, 0x81, 0xc0,
  0x6c, 0x10, 0x5b, 0x95, 0x86, 0xf3, 0xd0, 0x70, 0x9e, 0xfd, 0x0e, 0x93,
  0x81, 0xc0, 0xaa, 0xb0, 0x9e, 0x66, 0xd3, 0x93, 0x6e, 0xaa, 0x3c, 0x1d,
  0x76, 0x9f, 0xd9, 0xe5, 0xa4, 0x9b, 0x5e, 0x96, 0xcf, 0xcb, 0x63, 0x7a,
  0xfa, 0xed, 0x0e, 0xd2, 0xe9, 0xf2, 0xb4, 0xb8, 0x4e, 0x2f, 0xcf, 0x81,
  0x40, 0xa0, 0xb6, 0x4a, 0xde, 0x80, 0x8c, 0x77, 0xbd, 0xe1, 0xae, 0xb1,
  0xbc, 0x1c, 0xa6, 0x97, 0x91, 0x61, 0x37, 0x99, 0x5d, 0x36, 0xbe, 0xe5,
  0xcc, 0xb4, 0xd8, 0x35, 0x66, 0x87, 0xe7, 0x73, 0x17, 0xb5, 0x8c, 0xa7,
  0xd7, 0xe5, 0x65, 0x19, 0x91, 0x67, 0x66, 0xbf, 0xc3, 0x74, 0x5f, 0x09,
  0xe4, 0x41, 0xe0, 0x77, 0xfe, 0xb6, 0xcb, 0x73, 0x74, 0xd2, 0x6d, 0x7e,
  0x03, 0x81, 0x33, 0xeb, 0x8f, 0x34, 0xa5, 0xcb, 0xeb, 0x63, 0x7a, 0x5d,
  0x5e, 0x26, 0x0b, 0xeb, 0x66, 0x73, 0x59, 0x0e, 0xac, 0x4a, 0xc3, 0x79,
  0xaa, 0x3c, 0x3c, 0x2e, 0x37, 0xcb, 0x73, 0x74, 0xd2, 0x6d, 0x7e, 0x03,
  0x81, 0x40, 0x60, 0xd0, 0x18, 0xa2, 0x65, 0xa9, 0x18, 0xdf, 0x58, 0x9c,
  0x00, 0x58, 0x7e, 0x61, 0x72, 0x22, 0xc9, 0x4c, 0xec, 0x60, 0xb8, 0x7c,
  0xe7, 0xf1, 0x85, 0x88, 0x00, 0x26, 0x22, 0x04, 0x9a, 0x61, 0x21, 0x3e,
  0x27, 0x2a, 0x91, 0xc0, 0x97, 0xa6, 0x88, 0x12, 0x26, 0x9f, 0x05, 0x98,
  0x67, 0x21, 0x22, 0xce, 0x61, 0x1e, 0x20, 0x42, 0x24, 0xa7, 0x61, 0x27,
  0x60, 0x22, 0x4c, 0xe5, 0x0f, 0x86, 0xcb, 0x77, 0x1e, 0x5f, 0x88, 0x08,
  0x60, 0x22, 0x42, 0xa0, 0x19, 0x16, 0xe2, 0x73, 0xa2, 0x12, 0x09, 0x7c,
  0x69, 0x8a, 0x28, 0x61, 0xf2, 0x57, 0x00, 0x9b, 0x22, 0x40, 0x40, 0x1a,
  0x43, 0x13, 0x04, 0x62, 0x21, 0x22, 0x60, 0x42, 0x9c, 0x86, 0x9d, 0x22,
  0x4a, 0x98, 0xa8, 0x88, 0x30, 0x89, 0x6d, 0xb8, 0x7c, 0xe7, 0xf1, 0x85,
  0x80, 0x2a, 0x0a, 0x22, 0x2a, 0x1d, 0x60, 0x28, 0x09, 0x03, 0x10, 0x30,
  0x1f, 0xb9, 0x6d, 0x73, 0x10, 0x82, 0xda, 0x1a, 0xa4, 0x10, 0x99, 0xd8,
  0x03, 0x18, 0x88, 0x88, 0x73, 0x1a, 0x69, 0x02, 0x9a, 0x49, 0x32, 0x8f,
  0x6a, 0xb8, 0x7c, 0xe7, 0xf1, 0x27, 0xe2, 0x9a, 0xa8, 0x88, 0x28, 0x1d,
  0x60, 0xf0, 0x8b, 0xdb, 0xae, 0x93, 0x50, 0x20, 0xe3, 0x5d, 0x6f, 0xb8,
  0x6b, 0x2c, 0x2f, 0x87, 0xe9, 0x65, 0x64, 0xd8, 0x4d, 0x66, 0x97, 0x8d,
  0x6f, 0x39, 0x33, 0x2d, 0x76, 0x8d, 0xd9, 0xe1, 0xf9, 0xdc, 0x35, 0xa5,
  0xcb, 0xeb, 0x63, 0x7a, 0x5d, 0x5e, 0x26, 0x0b, 0xeb, 0x66, 0x73, 0x59,
  0xce, 0x93, 0x86, 0xf3, 0x54, 0x79, 0x78, 0x5c, 0x6e, 0x96, 0xe7, 0xe8,
  0xa4, 0xdb, 0xfc, 0xf6, 0x99, 0xc6, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x96,
  0x13, 0x2d, 0xc3, 0x0a, 0x60, 0x1d, 0x12, 0x11, 0xc2, 0x84, 0x38, 0x8d,
  0x5f, 0xdc, 0xb6, 0x7d, 0x80, 0xc1, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x11,
  0x20, 0x10, 0x2b, 0x80, 0xf9, 0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xaf, 0x00,
  0x96, 0x02, 0xd8, 0xe2, 0x00, 0x83, 0x55, 0x38, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7, 0x5d, 0x28, 0x7b, 0x40, 0xc6, 0xbb,
  0xde, 0x70, 0xd7, 0x58, 0x5e, 0x0e, 0xd3, 0xcb, 0xc8, 0xb0, 0x9b, 0xcc,
  0x2e, 0x1b, 0xdf, 0x72, 0x66, 0x5a, 0xec, 0x1a, 0xb3, 0xc3, 0xf3, 0xb9,
  0x8b, 0x5a, 0xc6, 0xd3, 0xeb, 0xf2, 0xb2, 0x8c, 0xc8, 0xb3, 0x97, 0xc7,
  0xf4, 0xb7, 0x9c, 0x67, 0x66, 0xbf, 0xc3, 0x74, 0x16, 0x88, 0xe6, 0x03,
  0xf9, 0x2c, 0x85, 0x0d, 0x86, 0xcb, 0x77, 0x1e, 0x5f, 0x88, 0x08, 0x60,
  0x22, 0x42, 0xa0, 0x19, 0x16, 0xe2, 0x73, 0xa2, 0x12, 0x09, 0x7c, 0x69,
  0x8a, 0x28, 0x61, 0xf2, 0x59, 0x80, 0x79, 0x16, 0x22, 0x62, 0x27, 0x60,
  0x22, 0xec, 0x01, 0x31, 0x81, 0x89, 0x88, 0x10, 0x60, 0xa9, 0x05, 0x36,
  0x08, 0xfc, 0xdc, 0x6f, 0x79, 0x3b, 0xcc, 0x9e, 0x03, 0x81, 0x33, 0xeb,
  0x8f, 0x44, 0x2d, 0xe3, 0xe9, 0x75, 0x79, 0x59, 0x46, 0x04, 0x5a, 0x7f,
  0x24, 0x7b, 0x79, 0x4c, 0x7f, 0xcb, 0x81, 0x4d, 0x12, 0x6c, 0x06, 0x04,
  0x02, 0x81, 0x41, 0x1b, 0x09, 0x83, 0xe1, 0xf2, 0x9d, 0xc7, 0x17, 0x22,
  0x02, 0x98, 0x88, 0x10, 0x68, 0x86, 0x85, 0xf8, 0x9c, 0xa8, 0x44, 0x02,
  0xdf, 0x04, 0x26, 0x22, 0x42, 0x80, 0xa5, 0x10, 0xd8, 0x20, 0xf0, 0x9b,
  0xa3, 0xc3, 0xe4, 0xf7, 0x7d, 0x1a, 0x6e, 0xc3, 0xd9, 0x65, 0x39, 0x10,
  0x38, 0xab, 0x4e, 0xc3, 0x6d, 0x38, 0xbb, 0x2c, 0x1f, 0xbe, 0xdb, 0xf0,
  0xb0, 0x3c, 0x3d, 0x7f, 0xbb, 0xa7, 0xf4, 0x30, 0xbd, 0x0c, 0x04, 0x06,
  0xcd, 0xe2, 0x19, 0x2e, 0xdf, 0x79, 0x7c, 0xaa, 0x01, 0x22, 0xcc, 0x2f,
  0x6e, 0x1b, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x49, 0x07, 0x00, 0x00,
  0x13, 0x04, 0x49, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
  0x04, 0x98, 0x01, 0x28, 0xae, 0xb2, 0x14, 0x28, 0xb7, 0x02, 0x16, 0x28,
  0xbb, 0x92, 0x29, 0xc1, 0x80, 0xf2, 0xff, 0x3f, 0x28, 0x53, 0x81, 0x42,
  0x15, 0x28, 0xc2, 0x80, 0xa2, 0x15, 0x28, 0x51, 0x81, 0xf2, 0x2b, 0x61,
  0x81, 0x4a, 0x28, 0x5d, 0x81, 0x1a, 0x28, 0x97, 0x52, 0x29, 0xc3, 0x00,
  0xca, 0x94, 0x47, 0x11, 0x8c, 0x00, 0x94, 0x41, 0x09, 0x94, 0x03, 0x0d,
  0xc6, 0x08, 0xfe, 0xff, 0xff, 0xef, 0x3f, 0x18, 0x23, 0x68, 0xcd, 0x39,
  0xe7, 0xbd, 0x31, 0x02, 0x10, 0x04, 0x41, 0xf4, 0x1b, 0x23, 0x00, 0x41,
  0x10, 0xf4, 0xbf, 0x31, 0x02, 0x10, 0x04, 0x41, 0xfd, 0x1b, 0x23, 0x00,
  0x41, 0x10, 0xa4, 0xbf, 0x11, 0x80, 0x31, 0x02, 0x10, 0x04, 0x41, 0x15,
  0x0c, 0xc6, 0x08, 0x40, 0x10, 0x04, 0xe1, 0x6f, 0x8c, 0x00, 0x04, 0x41,
  0x10, 0xff, 0x85, 0x31, 0x02, 0x10, 0x04, 0x41, 0xfc, 0x1b, 0x23, 0x00,
  0x41, 0x10, 0x04, 0x41, 0x61, 0x8c, 0x00, 0x04, 0x41, 0x10, 0x04, 0x83,
  0x19, 0x00, 0x00, 0x00, 0xf4, 0x0f, 0x91, 0x41, 0x21, 0xf1, 0x18, 0xe4,
  0x0f, 0x94, 0x41, 0x20, 0x41, 0x19, 0x24, 0x12, 0x94, 0x41, 0x26, 0xd1,
  0x18, 0x84, 0x12, 0x8d, 0x41, 0x2a, 0xa1, 0x18, 0xc4, 0x12, 0x8a, 0x41,
  0x2e, 0x81, 0x18, 0x14, 0x13, 0x81, 0x41, 0x31, 0x51, 0x18, 0x44, 0x12,
  0xa7, 0x41, 0x26, 0x51, 0x1a, 0x84, 0x12, 0xa1, 0x31, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0xb6, 0x30, 0x0f, 0x75, 0x30, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x01, 0x2d, 0xd4, 0x83, 0x1d, 0x0c, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0x20, 0x0b, 0xf7, 0x70, 0x07, 0xc3, 0x4c, 0x44, 0x1a, 0x00,
  0x6c, 0x40, 0x0a, 0x23, 0x06, 0x05, 0x00, 0x82, 0x60, 0x20, 0x0a, 0x22,
  0x11, 0x07, 0x3b, 0x35, 0x80, 0xc2, 0x3a, 0xbc, 0xc3, 0xb0, 0x01, 0x11,
  0x08, 0x03, 0xb0, 0x53, 0x43, 0x28, 0xb0, 0x03, 0x3b, 0x50, 0x00, 0x18,
  0xc3, 0x0d, 0x81, 0x3b, 0x80, 0xc1, 0x2c, 0x43, 0x80, 0x04, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x40, 0x07, 0x2d, 0xd1, 0x07, 0xc9, 0x3b, 0x8c,
  0x26, 0x04, 0xc0, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xf8, 0x82, 0x3e,
  0x80, 0x42, 0x34, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x77, 0xf0, 0x12,
  0xa3, 0x10, 0x08, 0xf2, 0xb0, 0x06, 0xf4, 0x30, 0x9a, 0x10, 0x00, 0x23,
  0x06, 0x0a, 0x00, 0x82, 0x60, 0x70, 0x07, 0x31, 0x51, 0x0a, 0x03, 0x61,
  0x0f, 0x6d, 0x60, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x62, 0xa0, 0x00, 0x20,
  0x08, 0x06, 0x77, 0x30, 0x13, 0xa7, 0x50, 0x18, 0xed, 0xf0, 0x06, 0xf8,
  0x30, 0x9a, 0x10, 0x00, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0x70, 0x07,
  0x35, 0x91, 0x0a, 0x07, 0x62, 0x0f, 0x71, 0xa0, 0x0f, 0xa3, 0x09, 0x01,
  0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x77, 0x70, 0x13, 0xab, 0x90,
  0x28, 0xf9, 0x30, 0x07, 0xfc, 0x30, 0x9a, 0x10, 0x00, 0x23, 0x06, 0x0a,
  0x00, 0x82, 0x60, 0x70, 0x07, 0x39, 0xd1, 0x0a, 0x0b, 0xc3, 0x0e, 0x75,
  0xe0, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06,
  0x77, 0xb0, 0x13, 0xaf, 0xd0, 0x38, 0xed, 0x70, 0x07, 0x20, 0x31, 0x9a,
  0x10, 0x00, 0x23, 0x06, 0x05, 0x00, 0x82, 0x60, 0x40, 0x0a, 0x37, 0x41,
  0x0a, 0x15, 0x88, 0x84, 0x54, 0xf0, 0x40, 0x05, 0xa6, 0xa0, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0x80, 0x0b, 0x30, 0x31, 0x0b, 0x65, 0x30, 0x62,
  0xa0, 0x00, 0x20, 0x08, 0x06, 0x77, 0x20, 0x16, 0xb6, 0x10, 0x08, 0xb8,
  0xf0, 0x07, 0x27, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0xdc,
  0x50, 0x18, 0x60, 0x50, 0x03, 0x2d, 0x68, 0x11, 0x29, 0x81, 0x45, 0xa8,
  0x04, 0x4e, 0x37, 0x14, 0x01, 0x31, 0xdd, 0x40, 0x0c, 0xc5, 0x74, 0x03,
  0x71, 0x18, 0x15, 0xe8, 0x82, 0x16, 0xb1, 0x0b, 0x5a, 0x84, 0x24, 0x15,
  0x74, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xb8, 0xf0, 0x13, 0xe2,
  0x50, 0x07, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0x70, 0x07, 0x71, 0x51,
  0x0e, 0x81, 0x70, 0x0e, 0xae, 0x60, 0x13, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0x27, 0x0c, 0xf6, 0x84, 0xc1, 0x96, 0xa2, 0x49, 0x05, 0x65,
  0x00, 0x23, 0x06, 0x0a, 0x00, 0x82, 0x60, 0x70, 0x07, 0x78, 0xc1, 0x0e,
  0x48, 0xe0, 0x0e, 0xb5, 0xd0, 0x13, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0x27, 0x0c, 0xf6, 0x84, 0xc1, 0x16, 0x14, 0x06, 0x52, 0x01, 0x1b,
  0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18, 0xdc, 0xc1, 0x5f, 0xcc, 0xc3,
  0x13, 0xd4, 0x03, 0x2f, 0x90, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x09, 0x83, 0x3d, 0x61, 0xb0, 0x7b, 0x35, 0xec, 0xc3, 0x59, 0x9c,
  0x05, 0x05, 0xa3, 0x31, 0x86, 0x10, 0xa4, 0x85, 0xdd, 0x42, 0x10, 0x9f,
  0x31, 0x84, 0xe1, 0x2d, 0x4c, 0x08, 0xe2, 0x63, 0x81, 0x25, 0x1f, 0x13,
  0x2c, 0xf9, 0x98, 0x11, 0xc9, 0xc7, 0x8e, 0x48, 0x3e, 0x66, 0x30, 0xf2,
  0xb1, 0x83, 0x91, 0x8f, 0x09, 0x04, 0x7c, 0x2c, 0x38, 0xe0, 0x63, 0x43,
  0x01, 0x1f, 0x0b, 0x10, 0xf8, 0x94, 0x19, 0x80, 0x02, 0x8c, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x01, 0x2e, 0x90, 0xc6, 0x49, 0xe8, 0xc2, 0x88, 0x81,
  0x02, 0x80, 0x20, 0x18, 0xdc, 0x81, 0x6d, 0xa8, 0x44, 0x20, 0xb0, 0x44,
  0x3c, 0xec, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0xdc, 0x30, 0xd8, 0x1b, 0x06, 0x7b, 0xc3, 0x60, 0xeb, 0x0c, 0x52,
  0x01, 0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1, 0xe0, 0x0e, 0x7c, 0x43, 0x26,
  0x92, 0x80, 0x26, 0xf2, 0x61, 0x34, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41,
  0x08, 0x46, 0x13, 0x06, 0xe1, 0x86, 0xc1, 0xde, 0x30, 0xd8, 0x1b, 0x06,
  0x5b, 0x68, 0x10, 0x0b, 0x30, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x77,
  0x60, 0x1e, 0x3a, 0x11, 0x05, 0x3c, 0x11, 0x12, 0xab, 0x31, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x37, 0x0c, 0xf6, 0x86,
  0xc1, 0xde, 0x30, 0x58, 0x9b, 0xc8, 0x40, 0x3e, 0x36, 0x95, 0x81, 0x7c,
  0x6c, 0x32, 0x03, 0xf9, 0x98, 0xa3, 0x06, 0xf2, 0x31, 0x67, 0x0d, 0xe4,
  0x63, 0x0e, 0x1b, 0xc8, 0xc7, 0x06, 0x03, 0x3e, 0x36, 0x18, 0xf0, 0xb1,
  0xc1, 0x80, 0x8f, 0x31, 0x6e, 0x20, 0x1f, 0x63, 0xde, 0x40, 0x3e, 0xc6,
  0xc0, 0x81, 0x7c, 0xcc, 0x18, 0xe0, 0x63, 0xc6, 0x00, 0x1f, 0x33, 0x06,
  0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x01, 0x1f, 0xe8, 0xc7, 0x5b,
  0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xf8,
  0x81, 0x7e, 0xb4, 0x45, 0x60, 0x45, 0x20, 0x1f, 0x2b, 0x04, 0xf9, 0x58,
  0x31, 0xc8, 0xa7, 0x66, 0x61, 0x1d, 0x60, 0xc4, 0x40, 0x01, 0x40, 0x10,
  0x0c, 0xee, 0x40, 0x44, 0xec, 0xa2, 0x0d, 0x02, 0xbc, 0xe8, 0x89, 0xf3,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x1b,
  0x06, 0x7b, 0xc3, 0x60, 0x6f, 0x18, 0x6c, 0xcd, 0xc2, 0x3c, 0xc0, 0x88,
  0x81, 0x02, 0x80, 0x20, 0x18, 0xdc, 0x81, 0x8a, 0xf8, 0x45, 0x1d, 0x04,
  0xa0, 0x51, 0x16, 0xef, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0x37, 0x0c, 0xf6, 0x86, 0xc1, 0xde, 0x30, 0xd8, 0xa2,
  0x85, 0x7d, 0x80, 0x11, 0x03, 0x05, 0x00, 0x41, 0x30, 0xb8, 0x03, 0x19,
  0x31, 0x8d, 0x3e, 0x08, 0x50, 0xa3, 0x2d, 0xee, 0x63, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6e, 0x18, 0xec, 0x0d, 0x83,
  0xbd, 0x61, 0xb0, 0x36, 0xc1, 0x82, 0x7c, 0x6c, 0x8a, 0x05, 0xf9, 0xd8,
  0x24, 0x0b, 0xf2, 0x31, 0xc7, 0x16, 0xe4, 0x63, 0xce, 0x2d, 0xc8, 0xc7,
  0x1c, 0x5c, 0x90, 0x8f, 0x0d, 0x06, 0x7c, 0x6c, 0x30, 0xe0, 0x63, 0x83,
  0x01, 0x1f, 0x63, 0x74, 0x41, 0x3e, 0xc6, 0xec, 0x82, 0x7c, 0x8c, 0xe1,
  0x05, 0xf9, 0x98, 0x31, 0xc0, 0xc7, 0x8c, 0x01, 0x3e, 0x66, 0x0c, 0xf0,
  0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x3e, 0x30, 0x93, 0xdd, 0x18,
  0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xf0, 0x03,
  0x33, 0xc9, 0x8d, 0xc0, 0x8a, 0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62,
  0x90, 0x4f, 0xfd, 0x43, 0x4d, 0xc0, 0x88, 0x81, 0x02, 0x80, 0x20, 0x18,
  0xdc, 0x81, 0x9b, 0x88, 0x47, 0x2e, 0x04, 0xe4, 0x91, 0x1a, 0x33, 0x32,
  0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x37, 0x0c,
  0xf6, 0x86, 0xc1, 0xde, 0x30, 0xd8, 0xfa, 0x87, 0x9e, 0x80, 0x11, 0x03,
  0x05, 0x00, 0x41, 0x30, 0xb8, 0x03, 0x3b, 0x51, 0x8f, 0x70, 0x08, 0xd8,
  0x23, 0x36, 0x76, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34,
  0x61, 0x10, 0x6e, 0x18, 0xec, 0x0d, 0x83, 0xbd, 0x61, 0xb0, 0x05, 0x12,
  0x65, 0x01, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x80, 0x0b, 0x6d, 0x02,
  0x1f, 0xa3, 0x31, 0x62, 0xa0, 0x00, 0x20, 0x08, 0x06, 0x77, 0xf0, 0x27,
  0xf3, 0x11, 0x08, 0xf5, 0xa1, 0x1b, 0x64, 0x32, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x37, 0x0c, 0xf6, 0x86, 0xc1, 0xde,
  0x30, 0x58, 0xa3, 0xfa, 0x41, 0x3e, 0x46, 0xf9, 0x83, 0x7c, 0x8c, 0xfa,
  0x07, 0xf9, 0xd8, 0x33, 0x12, 0xf2, 0xb1, 0x87, 0x24, 0xe4, 0x63, 0x4f,
  0x49, 0xc8, 0xc7, 0x06, 0x03, 0x3e, 0x36, 0x18, 0xf0, 0xb1, 0xc1, 0x80,
  0x8f, 0x31, 0x27, 0x21, 0x1f, 0x63, 0x50, 0x42, 0x3e, 0xc6, 0xa4, 0x84,
  0x7c, 0xcc, 0x18, 0xe0, 0x63, 0xc6, 0x00, 0x1f, 0x33, 0x06, 0xf8, 0x8c,
  0x18, 0x2c, 0x00, 0x08, 0x82, 0x01, 0x1f, 0xcc, 0x0a, 0x8a, 0x0c, 0x42,
  0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xf8, 0xc1, 0xac,
  0x98, 0x48, 0x60, 0x45, 0x20, 0x1f, 0x2b, 0x04, 0xf9, 0x58, 0x31, 0xc8,
  0xa7, 0xd8, 0x02, 0x34, 0x60, 0xc4, 0x40, 0x01, 0x40, 0x10, 0x0c, 0xee,
  0x60, 0x57, 0x5e, 0xa4, 0x0b, 0x62, 0xc4, 0x3e, 0x40, 0x65, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6e, 0x18, 0xec, 0x0d,
  0x83, 0xbd, 0x61, 0xb0, 0xc5, 0x16, 0xa8, 0x01, 0x23, 0x06, 0x0a, 0x00,
  0x82, 0x60, 0x70, 0x07, 0xe3, 0x72, 0x23, 0x65, 0x10, 0xe4, 0x88, 0x7f,
  0xa0, 0xca, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0xdc, 0x30, 0xd8, 0x1b, 0x06, 0x7b, 0xc3, 0x60, 0xab, 0x2d, 0x60, 0x03,
  0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1, 0xe0, 0x0e, 0xd6, 0xe5, 0x47, 0xda,
  0x20, 0x08, 0x13, 0x13, 0x81, 0x95, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0xb8, 0x61, 0xb0, 0x37, 0x0c, 0xf6, 0x86, 0xc1,
  0x8e, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x29, 0xa8, 0xcb, 0x8f, 0xc0,
  0xc8, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x98, 0xc2, 0xba, 0x80, 0xc9,
  0x8b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x29, 0xb0, 0x4b, 0x98,
  0xcc, 0xc8, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x98, 0x82, 0xbb, 0x84,
  0xc9, 0x8c, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x29, 0xbc, 0x8b,
  0x98, 0xc8, 0xc8, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x98, 0x02, 0xbc,
  0x8c, 0x89, 0x8d, 0x8c, 0x18, 0x14, 0x00, 0x08, 0x82, 0x81, 0x28, 0xcc,
  0x8b, 0x98, 0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e, 0x36, 0x10, 0xf2,
  0xb1, 0x41, 0x81, 0x8f, 0x0d, 0x0a, 0x7c, 0x6c, 0x50, 0xe0, 0x63, 0x18,
  0x18, 0xc4, 0xc7, 0x30, 0x30, 0x88, 0x8f, 0x61, 0x60, 0x10, 0x1f, 0x9b,
  0xc6, 0x20, 0x3e, 0x36, 0x8d, 0x41, 0x7c, 0x6c, 0x1a, 0x83, 0xf8, 0x98,
  0x40, 0xc8, 0xc7, 0x04, 0x43, 0x3e, 0x26, 0x04, 0xf1, 0x31, 0x22, 0x91,
  0x8f, 0x1d, 0x88, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xc9, 0x22, 0x1f, 0x4b,
  0x1a, 0xf9, 0x98, 0x10, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c,
  0xf8, 0x80, 0x65, 0x42, 0xe5, 0x20, 0x82, 0x83, 0x08, 0x46, 0x0c, 0x0c,
  0x00, 0x04, 0xc1, 0xc0, 0x0f, 0x58, 0xe6, 0x4f, 0x02, 0x0b, 0x12, 0xf9,
  0x98, 0x70, 0xc8, 0xc7, 0x86, 0x42, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0x80, 0x0a, 0x2a, 0xc3, 0x27, 0x71, 0x32, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0xa8, 0xb0, 0x32, 0x7d, 0x02, 0x27, 0x25, 0xf0, 0x0b, 0x5c,
  0x30, 0xa8, 0x1b, 0x06, 0x65, 0x82, 0x9a, 0xc0, 0xc7, 0x84, 0x35, 0x81,
  0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xc4, 0x01, 0xcf, 0xac, 0x8a,
  0x8d, 0xd8, 0xcb, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0x81, 0x15, 0x02,
  0x7d, 0xac, 0x10, 0xe8, 0x63, 0x42, 0x9b, 0xc8, 0xc7, 0x04, 0x37, 0x91,
  0x8f, 0x09, 0x72, 0x02, 0x1f, 0x13, 0xe6, 0x04, 0x3e, 0x26, 0x27, 0x41,
  0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x20, 0x0e, 0xcc, 0xa6, 0x56,
  0xc0, 0xe4, 0x64, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x86, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xe2, 0x40, 0x6d, 0x72,
  0x85, 0x4c, 0x5e, 0x66, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34,
  0x61, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x20, 0x0e, 0xdc, 0xa6,
  0x57, 0xd0, 0x64, 0x65, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x86, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xe2, 0x40, 0x6e,
  0xc2, 0x85, 0x4d, 0x6c, 0x66, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0x34, 0x61, 0x18, 0xec, 0x99, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa0, 0x10, 0x37, 0xea, 0xf2, 0x48, 0x81, 0x05, 0x0f, 0x74, 0xcc,
  0xb1, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa0, 0x40, 0x37,
  0xed, 0xe2, 0x54, 0x81, 0x05, 0x0e, 0x74, 0xac, 0xc9, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0xa0, 0x70, 0x37, 0xf0, 0xd2, 0x60, 0x81,
  0x05, 0x0d, 0x74, 0x8c, 0xe1, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xa0, 0xa0, 0x37, 0xf3, 0xc2, 0x6c, 0x81, 0x05, 0x0c, 0x74, 0x4c,
  0x09, 0xe8, 0x63, 0x88, 0x40, 0x1f, 0x33, 0x06, 0xfa, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x41, 0x1c, 0x94, 0x0e, 0xbd, 0xfc, 0x09, 0xda, 0x8c,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x1d, 0x43,
  0x7c, 0xec, 0x18, 0xe2, 0x63, 0xc7, 0x10, 0x9f, 0x11, 0x83, 0x05, 0x00,
  0x41, 0x30, 0xe0, 0x03, 0xd4, 0xe9, 0x97, 0x41, 0x08, 0x06, 0x21, 0x18,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x3f, 0x40, 0x9d, 0x7d, 0x09, 0xac,
  0x08, 0xe4, 0x63, 0x85, 0x20, 0x1f, 0x2b, 0x06, 0xf9, 0xd4, 0x1e, 0xd8,
  0x0d, 0x5c, 0x1f, 0x0c, 0xea, 0x84, 0x41, 0x99, 0x40, 0x2e, 0xf0, 0x31,
  0xa1, 0x5c, 0xe0, 0x63, 0x42, 0x1e, 0xd0, 0xc7, 0x84, 0x3c, 0xa0, 0x8f,
  0x09, 0xe4, 0x22, 0x1f, 0x13, 0xca, 0x45, 0x3e, 0x26, 0xa4, 0x0b, 0x7c,
  0x4c, 0x50, 0x17, 0xf8, 0x58, 0xba, 0x04, 0xf1, 0x31, 0x3b, 0x18, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xa0, 0x80, 0x3b, 0x31, 0x63,
  0x07, 0x42, 0x60, 0x81, 0x1d, 0x40, 0xc7, 0xea, 0xc0, 0x90, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x80, 0xc2, 0xee, 0xd0, 0x4c, 0x1d, 0x14,
  0x81, 0x05, 0x75, 0x00, 0x1d, 0xa3, 0x83, 0x44, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x00, 0x0a, 0xbe, 0x73, 0x33, 0x74, 0x80, 0x04, 0x16,
  0xd0, 0x01, 0x74, 0x6c, 0x0e, 0x18, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x01, 0x28, 0x84, 0x8f, 0xce, 0xcc, 0xc1, 0x12, 0x58, 0x30, 0x07,
  0xd0, 0x31, 0x25, 0xa0, 0x8f, 0x21, 0x02, 0x7d, 0xcc, 0x18, 0xe8, 0x63,
  0x83, 0x19, 0xc4, 0xc7, 0x06, 0x33, 0x88, 0x8f, 0x0d, 0x66, 0x10, 0x9f,
  0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0xe0, 0x83, 0xf5, 0x01, 0x9b, 0x41,
  0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x3f, 0x58,
  0x1f, 0x9f, 0x09, 0xac, 0x08, 0xe4, 0x63, 0x85, 0x20, 0x1f, 0x2b, 0x06,
  0xf9, 0x98, 0x1b, 0xd8, 0x43, 0x7c, 0xcc, 0x0d, 0xec, 0x21, 0x3e, 0xe6,
  0x06, 0xf6, 0x10, 0x1f, 0x23, 0x99, 0x72, 0x88, 0x8f, 0x95, 0x4c, 0x39,
  0xc4, 0xc7, 0x4c, 0xa6, 0x1c, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08,
  0x06, 0x7c, 0x60, 0x3f, 0x6b, 0x33, 0x08, 0x81, 0x51, 0x10, 0x23, 0x06,
  0x0b, 0x00, 0x82, 0x60, 0xc0, 0x07, 0xf7, 0xc3, 0x36, 0xe9, 0x80, 0x0e,
  0xe7, 0xd0, 0x06, 0x6c, 0xb0, 0x06, 0x26, 0x04, 0xf4, 0xb1, 0xe0, 0x0d,
  0xe4, 0x63, 0xc2, 0x1b, 0xc8, 0xc7, 0x86, 0x37, 0x90, 0xcf, 0x88, 0xc1,
  0x02, 0x80, 0x20, 0x18, 0xf0, 0x01, 0xff, 0xc4, 0x8d, 0x3b, 0xb4, 0x03,
  0x3b, 0x3c, 0x4e, 0x63, 0x47, 0x40, 0x1f, 0x0b, 0x22, 0xf9, 0x98, 0x10,
  0xc9, 0xc7, 0x86, 0x48, 0x3e, 0xf6, 0x07, 0x64, 0x11, 0x1f, 0x0b, 0x12,
  0xf8, 0x18, 0x28, 0x94, 0x45, 0x7c, 0x2c, 0x50, 0xe0, 0x63, 0xa1, 0x60,
  0x16, 0xf1, 0xb1, 0x60, 0x81, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0xf0, 0xc1, 0x09, 0xf1, 0x8d, 0x4a, 0xa4, 0x04, 0x4a, 0xa8, 0x44, 0x4a,
  0xa0, 0xc4, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0xf0, 0x01, 0x0a, 0xf5,
  0xcd, 0x4a, 0xa8, 0x44, 0x4a, 0xa0, 0xc4, 0x49, 0x98, 0xc4, 0x88, 0xc1,
  0x02, 0x80, 0x20, 0x18, 0xf0, 0x41, 0x0a, 0xf9, 0x4d, 0x4a, 0xa0, 0xc4,
  0x49, 0xa4, 0x04, 0x4a, 0x9c, 0xc4, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0xf0, 0x81, 0x0a, 0xfd, 0x0d, 0x62, 0x10, 0x2d, 0xc1, 0x12, 0x2b, 0x31,
  0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x7c, 0xb0, 0x42, 0xa0, 0x93, 0x1c,
  0xc5, 0x4a, 0xa8, 0x44, 0x4a, 0xd8, 0x50, 0xc8, 0xc7, 0x8a, 0x42, 0x3e,
  0x26, 0x04, 0xf1, 0xb1, 0xb0, 0x09, 0xe8, 0x63, 0xc6, 0x21, 0x1f, 0x33,
  0x12, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x02, 0x42, 0x3e, 0x96, 0x34, 0xf2,
  0xb1, 0xa5, 0x91, 0x8f, 0x09, 0x41, 0x7c, 0x2c, 0x40, 0xe4, 0x63, 0x6a,
  0x53, 0xc4, 0xc7, 0x02, 0x21, 0x3e, 0x96, 0x71, 0xf0, 0x31, 0x8c, 0x83,
  0x8f, 0x5d, 0x1c, 0x7c, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0x80, 0x0f,
  0x7a, 0x48, 0x76, 0x06, 0x21, 0x00, 0x8b, 0x9f, 0xf0, 0x89, 0x11, 0x83,
  0x05, 0x00, 0x41, 0x30, 0xe0, 0x03, 0x1f, 0x9a, 0x1d, 0x62, 0x10, 0x7c,
  0xa2, 0x27, 0x78, 0xc2, 0x04, 0x4b, 0x3e, 0x26, 0x60, 0xf2, 0x31, 0x21,
  0x88, 0x8f, 0x05, 0x93, 0x7c, 0xac, 0xe0, 0xe4, 0x63, 0x07, 0x27, 0x1f,
  0x13, 0x82, 0xf8, 0x58, 0x70, 0xc9, 0xc7, 0xf2, 0xa6, 0x88, 0x8f, 0x05,
  0x42, 0x7c, 0x0c, 0xba, 0x17, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x01, 0x28, 0xa0, 0x51, 0xf8, 0x5c, 0xf1, 0x12, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x01, 0x28, 0xa4, 0x91, 0xf8, 0x50, 0xeb, 0x12, 0xd8, 0x94,
  0x2f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x50, 0x58, 0x23,
  0xf2, 0xd1, 0xe6, 0x25, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x50,
  0x60, 0xa3, 0xf2, 0xb9, 0xda, 0x25, 0x30, 0x02, 0x5c, 0xe2, 0x63, 0xc2,
  0xaf, 0xc4, 0xc7, 0x92, 0x7f, 0x91, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x80, 0x02, 0x1c, 0xa5, 0x0f, 0x94, 0x2f, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x80, 0x42, 0x1c, 0xa9, 0x4f, 0x33, 0x2f, 0x81, 0x31,
  0x21, 0x23, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00, 0x85, 0x39,
  0x62, 0x9f, 0x69, 0x5f, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00,
  0x05, 0x3a, 0x6a, 0x1f, 0xa8, 0x5e, 0x02, 0x23, 0xd0, 0x25, 0x3e, 0x26,
  0x9c, 0x4b, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x00, 0x1c, 0xcc,
  0xa8, 0x7d, 0x46, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xc4, 0xc1,
  0x8c, 0xdc, 0xe7, 0x74, 0x46, 0x0c, 0x2a, 0x00, 0x04, 0xc1, 0x40, 0x15,
  0xe6, 0xa8, 0x7c, 0x84, 0x80, 0x5d, 0xd4, 0x45, 0x75, 0x54, 0x67, 0x7e,
  0xe6, 0x67, 0x7e, 0x98, 0x45, 0x75, 0x88, 0x41, 0x75, 0x54, 0x67, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0c,
  0x00, 0x04, 0xc1, 0x00, 0x1c, 0xd8, 0x68, 0x7e, 0x54, 0x67, 0xc4, 0xa0,
  0x02, 0x40, 0x10, 0x0c, 0x54, 0x01, 0x8f, 0xd4, 0x27, 0x30, 0xe2, 0xe5,
  0x5d, 0x5e, 0xe7, 0x75, 0xf0, 0x07, 0x7f, 0xf0, 0x27, 0x82, 0x5e, 0x27,
  0x41, 0x5e, 0xe7, 0x75, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0xc1, 0x06, 0xda, 0x91, 0x8f, 0x0d, 0xb5, 0x23, 0x1f, 0x1b,
  0x6c, 0x47, 0x3e, 0x36, 0xe8, 0x0e, 0x7c, 0x6c, 0xd8, 0x1d, 0xf8, 0xd8,
  0xc0, 0x3b, 0xf0, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x3e, 0x50,
  0xa5, 0xff, 0x19, 0x84, 0x60, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0xf0, 0x03, 0x55, 0xea, 0x9f, 0xc0, 0x8a, 0x40, 0x3e, 0x56, 0x08,
  0xf2, 0xb1, 0x62, 0x90, 0x8f, 0x9d, 0xc9, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0x00, 0x05, 0x57, 0x3a, 0xa1, 0x61, 0x3f, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0x00, 0x85, 0x57, 0x42, 0xa1, 0xa1, 0x56,
  0x02, 0x4b, 0x13, 0x43, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x00,
  0x0a, 0xb1, 0xa4, 0x42, 0x46, 0x7f, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x00, 0x0a, 0xb2, 0xb4, 0x42, 0xc6, 0xad, 0x04, 0xb6, 0x26, 0x89,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00, 0x14, 0x68, 0xa9, 0x85,
  0x92, 0xff, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00, 0x14, 0x6a,
  0xc9, 0x85, 0x92, 0x5c, 0x09, 0x46, 0x0c, 0x16, 0x00, 0x04, 0xc1, 0x80,
  0x0f, 0x70, 0xa9, 0x85, 0x0e, 0x22, 0x38, 0x88, 0x60, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0xfc, 0x00, 0x97, 0x56, 0x28, 0xb0, 0x20, 0x91, 0x8f,
  0x09, 0x87, 0x7c, 0x6c, 0x28, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x71, 0x10, 0x4e, 0x30, 0xa4, 0x3b, 0x7e, 0x34, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x36, 0x94, 0x81, 0x7c, 0x6c,
  0x28, 0x03, 0xf9, 0xd8, 0x50, 0x06, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0x5d, 0xa0, 0x25, 0x1c, 0x6a, 0x9f, 0x11, 0x83, 0x06, 0x00,
  0x41, 0x30, 0x60, 0x05, 0x5e, 0x92, 0xa1, 0x40, 0x95, 0x68, 0x63, 0x36,
  0x7a, 0xa8, 0x87, 0x7a, 0xa8, 0x87, 0x46, 0x13, 0x02, 0xc0, 0x8c, 0x40,
  0x3e, 0x66, 0x08, 0xf2, 0x31, 0x63, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0xd0, 0x41, 0x3b, 0xf5, 0xd0, 0xf9, 0x98, 0xd2, 0x68, 0x42,
  0x10, 0x0c, 0x37, 0x04, 0xb1, 0x04, 0x06, 0xb3, 0x0c, 0x84, 0x10, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x1c, 0xc4, 0x13, 0x18, 0xa9, 0x8f,
  0x2c, 0x8d, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x4e, 0x0d, 0xed, 0x63, 0x4b, 0xb6, 0x34, 0x6c, 0x40, 0x04, 0xbb, 0x44,
  0x00, 0x3b, 0x35, 0xb8, 0xcf, 0x2d, 0xed, 0xd2, 0xb0, 0x01, 0x11, 0xbc,
  0xd0, 0x00, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x39, 0xf8, 0xd2,
  0x19, 0xdd, 0xcf, 0x88, 0x01, 0x55, 0x80, 0x20, 0x18, 0xb8, 0x82, 0x3a,
  0xed, 0x50, 0xb0, 0x4b, 0x3a, 0x94, 0x4b, 0xbd, 0x94, 0x4b, 0xfa, 0x91,
  0x1f, 0xf8, 0xf1, 0x42, 0x46, 0x41, 0xc0, 0x10, 0xfc, 0x90, 0x30, 0x18,
  0xc3, 0x11, 0x41, 0x0c, 0x11, 0xdf, 0x2c, 0xc3, 0x50, 0x04, 0xb3, 0x04,
  0xc5, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xc4, 0x81, 0x3e, 0xa5, 0xd1,
  0xfc, 0xf4, 0xd2, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xc4,
  0xc1, 0x3f, 0xb9, 0x11, 0xfe, 0xe4, 0xd2, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0xc4, 0x01, 0x49, 0xcd, 0x51, 0xff, 0x98, 0xd3, 0x68,
  0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10,
  0x83, 0x39, 0x2b, 0x22, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00,
  0x05, 0x92, 0xea, 0x23, 0x67, 0x45, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0x00, 0x85, 0x92, 0xf2, 0x23, 0x67, 0x45, 0x02, 0x0b, 0x1c, 0xe8,
  0x58, 0xf3, 0x22, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x50,
  0x40, 0xa9, 0x50, 0x6a, 0x5e, 0x24, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x03, 0x50, 0x48, 0x29, 0x51, 0x6a, 0x5e, 0x24, 0xb0, 0xa0, 0x81, 0x8e,
  0x31, 0x33, 0x22, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00, 0x05,
  0x96, 0x2a, 0x25, 0x66, 0x46, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0x00, 0x85, 0x96, 0x32, 0x25, 0x66, 0x46, 0x02, 0x0b, 0x18, 0xe8, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x1c, 0xd4, 0x14, 0x29, 0xb9, 0x50,
  0x3e, 0x8d, 0x26, 0x04, 0x80, 0x05, 0x6d, 0x24, 0x1f, 0x13, 0xda, 0x48,
  0x3e, 0x36, 0xb4, 0x91, 0x7c, 0x8c, 0x68, 0x23, 0xf9, 0x8c, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x81, 0x2e, 0x9c, 0xd4, 0x2a, 0xfd, 0xd0, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0xf0, 0xc2, 0x49, 0xb1, 0x92, 0x19, 0x8d, 0x18,
  0x3c, 0x00, 0x08, 0x82, 0x81, 0x1e, 0xe8, 0x94, 0x2a, 0x09, 0x41, 0xd4,
  0xa0, 0x11, 0x1a, 0xc5, 0x52, 0x2c, 0xc5, 0x52, 0x32, 0x9a, 0x10, 0x00,
  0x16, 0xac, 0x91, 0x7c, 0x8c, 0x42, 0xe2, 0x63, 0x4a, 0x04, 0x9f, 0x11,
  0x83, 0x07, 0x00, 0x41, 0x30, 0xd0, 0x83, 0x9f, 0x7a, 0xa5, 0xc3, 0x10,
  0x82, 0x36, 0x6a, 0x23, 0x5b, 0xb2, 0x25, 0x5b, 0x72, 0x46, 0x13, 0x02,
  0xc0, 0x82, 0x02, 0x3e, 0x96, 0x39, 0xf1, 0x31, 0xcb, 0x89, 0xcf, 0x88,
  0xc1, 0x03, 0x80, 0x20, 0x18, 0xe8, 0x01, 0x59, 0xd1, 0x12, 0xb3, 0x08,
  0x81, 0x1c, 0xc9, 0xd1, 0x2e, 0xed, 0xd2, 0x2e, 0x4d, 0xa3, 0x09, 0x01,
  0x60, 0x45, 0x00, 0x1f, 0x93, 0x3c, 0xf8, 0xd8, 0x46, 0xc5, 0x67, 0xc4,
  0xe0, 0x01, 0x40, 0x10, 0x0c, 0xf4, 0x20, 0xad, 0x72, 0x29, 0x82, 0x84,
  0xe0, 0x8e, 0xee, 0x08, 0x9c, 0xc0, 0x09, 0x9c, 0xb0, 0xd1, 0x84, 0x00,
  0xb0, 0x22, 0x80, 0x8f, 0x61, 0x63, 0x00, 0x1f, 0xc3, 0xc0, 0x00, 0x3e,
  0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xa0, 0x07, 0x6e, 0xe5, 0x4b, 0x56,
  0x25, 0x04, 0x7c, 0xc4, 0x47, 0xe5, 0x54, 0x4e, 0xe5, 0xd4, 0x8d, 0x26,
  0x04, 0x80, 0x15, 0x01, 0x7c, 0x0c, 0x0d, 0xb4, 0xf8, 0x18, 0x57, 0x06,
  0xf0, 0x19, 0x31, 0x78, 0x00, 0x10, 0x04, 0x03, 0x3d, 0x98, 0xab, 0x71,
  0xda, 0x34, 0x21, 0x08, 0xa5, 0x50, 0x52, 0x27, 0x75, 0x52, 0x27, 0x31,
  0x18, 0x4d, 0x08, 0x00, 0x2b, 0x02, 0xf8, 0x58, 0x1b, 0x80, 0x41, 0x7c,
  0x4c, 0x0d, 0xc0, 0x20, 0x3e, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xa0,
  0x07, 0x78, 0x85, 0x4e, 0x60, 0xf0, 0x09, 0x81, 0x29, 0x99, 0xd2, 0x3b,
  0xbd, 0xd3, 0x3b, 0x9d, 0xc1, 0x68, 0x42, 0x00, 0x58, 0x11, 0xc0, 0xc7,
  0xc8, 0x40, 0x0e, 0xe0, 0x63, 0x6f, 0x60, 0x06, 0xf1, 0x19, 0x31, 0x78,
  0x00, 0x10, 0x04, 0x03, 0x3d, 0xe8, 0xab, 0x76, 0x2a, 0x03, 0x32, 0x10,
  0x82, 0x55, 0x5a, 0x25, 0x7a, 0xa2, 0x27, 0x7a, 0x62, 0x83, 0xd1, 0x84,
  0x00, 0xb0, 0x22, 0x80, 0x8f, 0xa9, 0xc1, 0x1d, 0xc0, 0xc7, 0xd4, 0x80,
  0x0e, 0xe0, 0x33, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0x7a, 0x20, 0x5a,
  0xf2, 0xa4, 0x06, 0x69, 0x20, 0x04, 0xb0, 0x04, 0x4b, 0xf9, 0x94, 0x4f,
  0xf9, 0x14, 0x07, 0xa3, 0x09, 0x01, 0x60, 0x45, 0x00, 0x1f, 0x0b, 0x7e,
  0x49, 0x3e, 0x16, 0x04, 0xf2, 0x99, 0x25, 0x28, 0x06, 0x3a, 0x06, 0xbc,
  0x0c, 0x06, 0xb8, 0x0c, 0x04, 0x81, 0x30, 0x5c, 0xa2, 0x95, 0xf8, 0x58,
  0x2e, 0xd1, 0x4a, 0x7c, 0x4c, 0x97, 0x68, 0x25, 0x3e, 0x23, 0x06, 0x0b,
  0x00, 0x82, 0x60, 0xc0, 0x07, 0xaa, 0xf5, 0x4f, 0x83, 0x10, 0x0c, 0x42,
  0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x7e, 0xa0, 0x5a, 0xfd, 0x14,
  0x58, 0x50, 0xc8, 0xc7, 0x84, 0x42, 0x3e, 0x36, 0x14, 0xf2, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0x38, 0x98, 0x2d, 0x91, 0x62, 0x25, 0xbc,
  0x1a, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0x88, 0x83, 0xdb, 0x32, 0x29, 0x58, 0xc2,
  0xab, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0,
  0x61, 0x89, 0x8f, 0x0d, 0x4b, 0x7c, 0x6c, 0x58, 0xe2, 0x33, 0x62, 0xb0,
  0x00, 0x20, 0x08, 0x06, 0x7c, 0xa0, 0x5b, 0x2f, 0x35, 0x08, 0xc1, 0x20,
  0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0x07, 0xba, 0xd5, 0x52,
  0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5, 0x20, 0x9f, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0xe0, 0x83, 0xdf, 0xa2, 0xa9, 0x45, 0x49,
  0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x3f, 0xf8, 0xad,
  0xbe, 0x0a, 0x6c, 0x9e, 0x82, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x81, 0x1f, 0x84, 0xd7, 0x49, 0x05, 0x16, 0xe0, 0x93, 0x7c, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x0f, 0xc6, 0x0b, 0xa5, 0x02, 0x0b, 0xd2,
  0x42, 0x3e, 0x26, 0xa4, 0x85, 0x7c, 0x6c, 0x48, 0x0b, 0xf9, 0x18, 0x5b,
  0x0c, 0xf1, 0x31, 0xb6, 0x18, 0xe2, 0x63, 0x6c, 0x31, 0xc4, 0x67, 0xc4,
  0x60, 0x01, 0x40, 0x10, 0x0c, 0xf8, 0x60, 0xbd, 0xc0, 0x2a, 0x26, 0x60,
  0xe2, 0x25, 0x2e, 0xab, 0x1a, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x3f,
  0x58, 0xaf, 0xd4, 0x0a, 0xac, 0x3b, 0x03, 0xf9, 0x58, 0x20, 0xc8, 0xc7,
  0x82, 0x43, 0x3e, 0xf6, 0xa9, 0x81, 0x7c, 0x2c, 0x28, 0xe4, 0x63, 0x41,
  0x22, 0x1f, 0x0b, 0x83, 0x36, 0x90, 0x8f, 0x05, 0x88, 0x7c, 0x2c, 0x58,
  0xe4, 0x63, 0xc7, 0x4b, 0xc0, 0xc7, 0x8a, 0x97, 0x80, 0x8f, 0x0d, 0x2f,
  0x01, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa0, 0x03, 0xfe, 0x62,
  0x2b, 0x7b, 0xaa, 0xad, 0xd1, 0x84, 0x00, 0x18, 0x6e, 0x08, 0xc0, 0x0b,
  0x0c, 0x66, 0x19, 0x0e, 0x23, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03,
  0x70, 0x48, 0x2f, 0xb8, 0x42, 0xa9, 0x11, 0x83, 0x06, 0x00, 0x41, 0x30,
  0x60, 0x05, 0xfa, 0x52, 0xab, 0x40, 0xbc, 0xd8, 0x65, 0x5d, 0xea, 0xaa,
  0xae, 0xea, 0xaa, 0xae, 0x46, 0x13, 0x82, 0x61, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0xcc, 0x21, 0xbd, 0xe6, 0x4a, 0xa4, 0x46, 0x0c, 0x1a, 0x00,
  0x04, 0xc1, 0x80, 0x15, 0xee, 0xab, 0xad, 0x02, 0xbc, 0x7a, 0x17, 0x77,
  0xc1, 0x2b, 0xbc, 0xc2, 0x2b, 0xbc, 0x1a, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x04, 0x33, 0x1c, 0xf9, 0xd8, 0xe1, 0xc8, 0xc7,
  0x10, 0x47, 0x3e, 0x66, 0x0c, 0xf0, 0x31, 0x63, 0x80, 0x8f, 0x19, 0x03,
  0x7c, 0x66, 0x09, 0x8e, 0x81, 0x8a, 0xc1, 0x30, 0xd0, 0xa0, 0x18, 0xa8,
  0x18, 0x0c, 0x03, 0x0d, 0x8a, 0x81, 0x8a, 0xc1, 0x30, 0xd0, 0xa0, 0x18,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x73, 0xb8, 0xaf, 0xd0, 0x82, 0xa9,
  0x11, 0x03, 0x07, 0x00, 0x41, 0x30, 0x80, 0x85, 0x11, 0x8b, 0xab, 0xa0,
  0x5f, 0xf8, 0xc5, 0xb4, 0x88, 0x41, 0x00, 0x2b, 0xb8, 0x9a, 0x25, 0x40,
  0x30, 0x1c, 0x08, 0x00, 0xf0, 0x02, 0x00, 0x00, 0x86, 0x3f, 0x60, 0x7c,
  0x26, 0x30, 0xe4, 0xb6, 0x85, 0x0b, 0x18, 0x3e, 0x62, 0xdb, 0x75, 0x6e,
  0xf5, 0x03, 0xc6, 0x67, 0x02, 0x43, 0x9e, 0x9b, 0xa2, 0x80, 0xe1, 0x23,
  0x75, 0xad, 0xdf, 0x86, 0x2b, 0x60, 0xf8, 0x08, 0x5d, 0xf7, 0xb6, 0xc9,
  0x0f, 0x18, 0x9f, 0x09, 0x0c, 0x39, 0x6f, 0x8d, 0x02, 0x86, 0x8f, 0xd4,
  0xb5, 0xae, 0x5b, 0xaf, 0x80, 0xe1, 0x23, 0x74, 0xdd, 0xe7, 0x26, 0x29,
  0x60, 0xf8, 0x48, 0x5d, 0xeb, 0xbd, 0x15, 0x0b, 0x18, 0x3e, 0x42, 0xd7,
  0x3d, 0x6f, 0xe4, 0x02, 0x86, 0x8f, 0xd8, 0x76, 0xcd, 0x1b, 0xe9, 0x80,
  0xe1, 0x23, 0xb5, 0x8d, 0xef, 0x66, 0x39, 0x60, 0xf8, 0x48, 0x6d, 0xe3,
  0xb8, 0xb9, 0x0b, 0x40, 0x2b, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51, 0xe9,
  0x00, 0x43, 0x4d, 0xdf, 0xa6, 0x3f, 0x60, 0xf8, 0x08, 0x6d, 0xef, 0xbc,
  0x95, 0x0f, 0x18, 0x3e, 0x42, 0xdb, 0x3b, 0x6d, 0xeb, 0x03, 0x86, 0x8f,
  0xd0, 0xf6, 0xae, 0xdb, 0xf9, 0x80, 0xe1, 0x23, 0xb4, 0xbd, 0xdb, 0x56,
  0x5c, 0x60, 0xf8, 0x08, 0x7d, 0xe7, 0xbd, 0xb9, 0x06, 0x3c, 0x2b, 0x60,
  0x6d, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x03, 0xbf, 0x1b, 0x6b, 0xc0,
  0xb3, 0x02, 0xd6, 0x46, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0xf0, 0xbc,
  0xa9, 0x06, 0x3c, 0x2b, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00,
  0x03, 0xdf, 0x9b, 0x6d, 0x81, 0xe1, 0x23, 0xf4, 0x9d, 0xdf, 0x56, 0x38,
  0xe0, 0xc0, 0x4e, 0xb4, 0x0c, 0x2b, 0x80, 0xa1, 0x11, 0x62, 0x20, 0x8d,
  0xa5, 0x0f, 0x18, 0x3e, 0x42, 0xdb, 0x3b, 0x6e, 0xf6, 0x04, 0x86, 0x8f,
  0xd0, 0x37, 0x9e, 0xdb, 0xe4, 0x80, 0xe1, 0x23, 0xb5, 0x8d, 0xd7, 0x16,
  0x5b, 0x60, 0xf8, 0x08, 0x7d, 0xe7, 0xb5, 0x9d, 0x0b, 0x18, 0x3e, 0x62,
  0xdb, 0x76, 0x6d, 0xef, 0x03, 0xc6, 0x67, 0x02, 0x83, 0x5e, 0x9b, 0xea,
  0x80, 0xe1, 0x23, 0xb5, 0x9d, 0xd3, 0xc6, 0x2e, 0x60, 0xf8, 0x88, 0x6d,
  0xdb, 0xb8, 0x69, 0x0a, 0x18, 0x3e, 0x52, 0xd7, 0xbb, 0x6d, 0xd1, 0x03,
  0xc6, 0x67, 0x02, 0x83, 0x8e, 0x5b, 0xec, 0x80, 0xe1, 0x23, 0xb5, 0x9d,
  0xe3, 0x26, 0x2a, 0x60, 0xf8, 0x48, 0x5d, 0xef, 0xb9, 0x39, 0x0f, 0x18,
  0x9f, 0x09, 0x0c, 0xfa, 0x6e, 0xf7, 0x01, 0x86, 0x8f, 0xd8, 0x35, 0xde,
  0x9b, 0xaa, 0x80, 0xe1, 0x23, 0x75, 0xbd, 0xf3, 0x56, 0x49, 0x60, 0xf8,
  0x88, 0x7d, 0xd3, 0xbb, 0xd1, 0x0b, 0x18, 0x3e, 0x62, 0xdb, 0xf6, 0x6e,
  0xac, 0x03, 0x86, 0x8f, 0xd4, 0x76, 0x6e, 0x5b, 0xff, 0x80, 0xe1, 0x23,
  0xb4, 0xcd, 0xd7, 0x86, 0x1a, 0xf0, 0xac, 0x80, 0xb5, 0x51, 0x45, 0x41,
  0x44, 0xa5, 0x03, 0x0c, 0x3d, 0x6d, 0xa6, 0x01, 0xcf, 0x0a, 0x58, 0x1b,
  0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0xd0, 0xd7, 0x46, 0x1a, 0xf0, 0xac,
  0x80, 0xb5, 0x51, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0xbd, 0x6d, 0xa2,
  0x01, 0xcf, 0x0a, 0x58, 0x1b, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0xd0,
  0xdf, 0x96, 0x1e, 0xf0, 0xac, 0x80, 0xb5, 0x51, 0x45, 0x41, 0x44, 0xa5,
  0x03, 0x0c, 0x3d, 0x6e, 0xf1, 0x01, 0xcf, 0x0a, 0x58, 0x1b, 0x55, 0x14,
  0x44, 0x54, 0x3a, 0xc0, 0xd0, 0xe7, 0x96, 0x1f, 0xf0, 0xac, 0x80, 0xb5,
  0x51, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0xbd, 0x6e, 0x95, 0x02, 0xcf,
  0x0a, 0x58, 0x1b, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0xd0, 0xef, 0xd6,
  0x29, 0xf0, 0xac, 0x80, 0xb5, 0x51, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c,
  0x3d, 0x6f, 0xa5, 0x02, 0xcf, 0x0a, 0x58, 0x1b, 0x55, 0x14, 0x44, 0x54,
  0x3a, 0xc0, 0xd0, 0xf7, 0x56, 0x48, 0x60, 0xf8, 0x08, 0x6d, 0xf3, 0xbb,
  0x3d, 0x17, 0x18, 0x3e, 0x42, 0xdf, 0xfa, 0x6d, 0xcf, 0x02, 0x86, 0x8f,
  0xd8, 0x36, 0x7d, 0xdb, 0xec, 0x80, 0xe1, 0x23, 0xb5, 0x9d, 0xeb, 0x06,
  0x4b, 0x60, 0xf8, 0x48, 0x7d, 0xdb, 0xbb, 0xd5, 0x0e, 0x18, 0x3e, 0x52,
  0xdb, 0x39, 0x6f, 0xc0, 0x05, 0x86, 0x8f, 0xd0, 0x77, 0xbe, 0x1b, 0xbf,
  0x80, 0xe1, 0x23, 0xb6, 0x7d, 0xd3, 0xb6, 0x3c, 0x60, 0x7c, 0x26, 0x30,
  0xec, 0xb4, 0x51, 0x0f, 0x18, 0x3e, 0x52, 0xdb, 0x3a, 0x6d, 0xff, 0x01,
  0x86, 0x8f, 0xd8, 0x75, 0x6e, 0x1b, 0xf2, 0x80, 0xf1, 0x99, 0xc0, 0xb0,
  0xdf, 0xd6, 0x2a, 0x60, 0xf8, 0x48, 0x5d, 0xf3, 0xb5, 0x09, 0x0a, 0x18,
  0x3e, 0x62, 0xd7, 0x79, 0x6e, 0xb0, 0x02, 0x86, 0x8f, 0xd4, 0x35, 0x8f,
  0xdb, 0xf6, 0x80, 0xe1, 0x23, 0xb5, 0xad, 0xdf, 0x56, 0x28, 0x60, 0xf8,
  0x88, 0x5d, 0xe7, 0xbc, 0xcd, 0x0a, 0x18, 0x3e, 0x52, 0xd7, 0xfc, 0x6e,
  0xe0, 0x03, 0x86, 0x8f, 0xd4, 0xb6, 0xae, 0x9b, 0xe3, 0x80, 0xe1, 0x23,
  0xb6, 0x7d, 0xeb, 0x46, 0x38, 0x60, 0xf8, 0x88, 0x6d, 0xdf, 0xb7, 0x91,
  0x0f, 0x18, 0x3e, 0x52, 0xdb, 0x7a, 0x6f, 0x91, 0x03, 0x86, 0x8f, 0xd8,
  0xf6, 0xdd, 0x9b, 0x25, 0x81, 0xe1, 0x23, 0xb4, 0xdd, 0xeb, 0xe6, 0x48,
  0x60, 0xf8, 0x08, 0x6d, 0xf7, 0xb7, 0x6d, 0x12, 0x18, 0x3e, 0x62, 0xdf,
  0x75, 0x6f, 0x88, 0x04, 0x86, 0x8f, 0xd0, 0x76, 0x4f, 0x9b, 0x20, 0x81,
  0xe1, 0x23, 0xb4, 0xcd, 0xe3, 0xc6, 0x5e, 0x60, 0xf8, 0x08, 0x7d, 0xef,
  0xb7, 0x89, 0x13, 0x18, 0x3e, 0x52, 0xdf, 0x38, 0x6d, 0xe1, 0x05, 0x86,
  0x8f, 0xd0, 0xf7, 0x4e, 0xdb, 0x3d, 0x81, 0xe1, 0x23, 0xf5, 0x8d, 0xeb,
  0xc6, 0x68, 0x60, 0xf8, 0x48, 0x8d, 0xd3, 0xb8, 0xf5, 0x13, 0x18, 0x3e,
  0x52, 0xdf, 0x78, 0x6f, 0xf0, 0x04, 0x86, 0x8f, 0xd4, 0x37, 0x7e, 0xdb,
  0x6e, 0x81, 0xe1, 0x23, 0xf4, 0x9d, 0xe7, 0x86, 0x28, 0x60, 0xf8, 0x88,
  0x5d, 0xeb, 0xb5, 0xd9, 0x0a, 0x18, 0x3e, 0x52, 0xd7, 0x3d, 0x6d, 0xe6,
  0x03, 0x86, 0x8f, 0xd4, 0xf6, 0x5e, 0xdb, 0xa2, 0x80, 0xe1, 0x23, 0x76,
  0xad, 0xe3, 0x96, 0x2b, 0x60, 0xf8, 0x48, 0x5d, 0xf7, 0xb7, 0xa9, 0x0f,
  0x18, 0x3e, 0x52, 0xdb, 0x7b, 0x6e, 0x8e, 0x02, 0x86, 0x8f, 0xd8, 0xb5,
  0xbe, 0x9b, 0xaf, 0x80, 0xe1, 0x23, 0x75, 0xdd, 0xeb, 0xc6, 0x3e, 0x60,
  0xf8, 0x48, 0x6d, 0xef, 0xbb, 0x6d, 0x1d, 0x0f, 0x80, 0x2d, 0x0e, 0x30,
  0x98, 0xb1, 0x80, 0xe1, 0x23, 0x75, 0xdd, 0xf7, 0x96, 0x38, 0x40, 0xc1,
  0x4e, 0xb4, 0x0c, 0x2b, 0x80, 0x75, 0x48, 0x44, 0x08, 0x13, 0xe2, 0x34,
  0x35, 0xad, 0x9b, 0xe2, 0x00, 0x05, 0x3b, 0xd1, 0x32, 0xac, 0x00, 0xd6,
  0x21, 0x11, 0x21, 0x4c, 0x88, 0xd3, 0xd4, 0xf4, 0x6e, 0x94, 0x03, 0x86,
  0x8f, 0xd8, 0x36, 0x6e, 0x5b, 0xe9, 0x80, 0xe1, 0x23, 0xb6, 0x8d, 0xf3,
  0x76, 0x39, 0x60, 0xf8, 0x88, 0x6d, 0xe3, 0xb9, 0xed, 0x0f, 0x18, 0x3e,
  0x52, 0xdb, 0x7b, 0x6f, 0xb1, 0x04, 0x86, 0x8f, 0xd8, 0xb7, 0xcd, 0x9b,
  0x6c, 0x81, 0xe1, 0x23, 0xf5, 0x9d, 0xdb, 0x36, 0x38, 0x60, 0xf8, 0x48,
  0x6d, 0xdf, 0xb6, 0xa1, 0x0f, 0x18, 0x3e, 0x52, 0xdb, 0xfb, 0x6d, 0x9b,
  0x06, 0x86, 0x8f, 0xd8, 0x38, 0xcd, 0x5b, 0x33, 0x81, 0xe1, 0x23, 0xf5,
  0x7d, 0xdb, 0xa6, 0x5c, 0x60, 0xf8, 0x08, 0x7d, 0xeb, 0xb5, 0x05, 0x17,
  0x18, 0x3e, 0x52, 0xdf, 0x39, 0x6f, 0xf1, 0x05, 0x86, 0x8f, 0xd0, 0xf7,
  0xae, 0x5b, 0x37, 0x81, 0xe1, 0x23, 0xf5, 0x7d, 0xef, 0x36, 0x29, 0x60,
  0xf8, 0x88, 0x5d, 0xef, 0xb4, 0xf1, 0x16, 0x18, 0x3e, 0x52, 0xdf, 0xb9,
  0x6e, 0xcb, 0x05, 0x86, 0x8f, 0xd4, 0xb7, 0x6e, 0xdb, 0xa6, 0x80, 0xe1,
  0x23, 0x76, 0xbd, 0xdf, 0xe6, 0x3f, 0x60, 0xf8, 0x48, 0x6d, 0xf3, 0xb6,
  0x41, 0x17, 0x18, 0x3e, 0x52, 0xdf, 0x3a, 0x6e, 0xa3, 0x02, 0x86, 0x8f,
  0xd8, 0xf5, 0xae, 0x5b, 0x77, 0x81, 0xe1, 0x23, 0xf5, 0xad, 0xf3, 0xb6,
  0x2a, 0x60, 0xf8, 0x88, 0x5d, 0xef, 0xbd, 0x19, 0x12, 0x18, 0x3e, 0x52,
  0xdb, 0x3c, 0x6f, 0x83, 0x04, 0x86, 0x8f, 0xd4, 0x36, 0x9f, 0xdb, 0x36,
  0x81, 0xe1, 0x23, 0xf6, 0x7d, 0xe7, 0xd6, 0x68, 0x60, 0xf8, 0x88, 0x8d,
  0xd3, 0xb9, 0x19, 0x17, 0x18, 0x3e, 0x52, 0xdf, 0x3a, 0x6d, 0xde, 0x04,
  0x86, 0x8f, 0xd8, 0xf7, 0xcd, 0x9b, 0xbd, 0x00, 0xb4, 0x02, 0xd6, 0x46,
  0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0xd4, 0x34, 0x6e, 0xfd, 0x05, 0x86,
  0x8f, 0xd0, 0x77, 0x5f, 0xdb, 0xa0, 0x81, 0xe1, 0x23, 0xf4, 0xdd, 0xef,
  0xd6, 0x69, 0x60, 0xf8, 0x48, 0x8d, 0xd7, 0xb4, 0x15, 0x13, 0x18, 0x3e,
  0x52, 0xdf, 0x37, 0x6d, 0xde, 0x02, 0x86, 0x8f, 0xd8, 0x76, 0x6d, 0xdb,
  0xa1, 0x80, 0xe1, 0x23, 0x75, 0xad, 0xd3, 0xa6, 0x4d, 0x60, 0xf8, 0x48,
  0x7d, 0xdf, 0xb8, 0xdd, 0x16, 0x18, 0x3e, 0x52, 0xdf, 0x39, 0x6e, 0xd5,
  0x05, 0x86, 0x8f, 0xd4, 0xb7, 0xae, 0x1b, 0x75, 0x81, 0xe1, 0x23, 0xf4,
  0xad, 0xe7, 0xc6, 0x5d, 0x60, 0xf8, 0x08, 0x7d, 0xeb, 0xbb, 0x05, 0x0b,
  0x40, 0x2b, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x4d,
  0xd3, 0x36, 0x4e, 0x60, 0xf8, 0x88, 0x7d, 0xe3, 0xb5, 0x55, 0x0f, 0x18,
  0x3e, 0x62, 0xdb, 0x7a, 0x6d, 0x9a, 0x01, 0xcb, 0x0a, 0x60, 0x2d, 0x47,
  0x45, 0x11, 0xd1, 0x4c, 0xe6, 0x2a, 0x60, 0xf8, 0x88, 0x5d, 0xf3, 0xb6,
  0x71, 0x0f, 0x18, 0x3e, 0x62, 0xdb, 0x3a, 0x6e, 0xe2, 0x05, 0x86, 0x8f,
  0xd4, 0xf7, 0x5e, 0x5b, 0xac, 0x80, 0xe1, 0x23, 0x76, 0xcd, 0xe7, 0x16,
  0x3e, 0x60, 0xf8, 0x88, 0x6d, 0xeb, 0xbb, 0xb5, 0x17, 0x18, 0x3e, 0x52,
  0xdf, 0x3b, 0x6e, 0xb4, 0x02, 0x86, 0x8f, 0xd8, 0x35, 0xcf, 0x1b, 0x26,
  0x81, 0xe1, 0x23, 0xb5, 0xdd, 0xef, 0x26, 0x5f, 0x60, 0xf8, 0x48, 0x7d,
  0xef, 0xbb, 0x3d, 0x12, 0x18, 0x3e, 0x52, 0xdb, 0x3d, 0x6e, 0x89, 0x04,
  0x86, 0x8f, 0xd4, 0x76, 0x5f, 0x1b, 0x3e, 0x81, 0xe1, 0x23, 0xf6, 0x8d,
  0xef, 0x16, 0x4f, 0x60, 0xf8, 0x88, 0x7d, 0xe3, 0xb8, 0x09, 0x1a, 0x18,
  0x3e, 0x42, 0xdf, 0x3d, 0x6e, 0x9e, 0x06, 0x86, 0x8f, 0xd8, 0x78, 0x5d,
  0x9b, 0xbf, 0x00, 0xb4, 0x02, 0xd6, 0x46, 0x15, 0x05, 0x11, 0x95, 0x0e,
  0x30, 0xd4, 0x74, 0x6e, 0x8a, 0x06, 0x86, 0x8f, 0xd8, 0x38, 0x6d, 0xdb,
  0xa1, 0x81, 0xe1, 0x23, 0x35, 0x4e, 0xd7, 0x06, 0x4e, 0x50, 0xac, 0x12,
  0x14, 0x4d, 0xe6, 0x4f, 0x60, 0xf8, 0x88, 0x7d, 0xe7, 0xb4, 0xdd, 0x0a,
  0x18, 0x3e, 0x62, 0xd7, 0x7d, 0x6d, 0xba, 0x02, 0x86, 0x8f, 0xd8, 0x75,
  0x8f, 0xdb, 0xaf, 0x80, 0xe1, 0x23, 0x76, 0xdd, 0xef, 0xc6, 0x4f, 0x60,
  0xf8, 0x08, 0x7d, 0xe3, 0x3c, 0x29, 0x40, 0x0e, 0x02, 0x7e, 0x98, 0xde,
  0xc2, 0xc8, 0x66, 0xf0, 0x62, 0x6c, 0x84, 0xd2, 0xe8, 0x92, 0xdc, 0xc8,
  0xd2, 0xc6, 0xca, 0xe6, 0x80, 0x80, 0xb2, 0x82, 0x7e, 0x82, 0xac, 0x7e,
  0x48, 0xec, 0xca, 0xc6, 0xe8, 0xde, 0xe4, 0x80, 0x92, 0x48, 0x60, 0x64,
  0x80, 0x80, 0x92, 0x80, 0xb4, 0x5c, 0xca, 0xf0, 0xd2, 0xe8, 0x6c, 0x71,
  0xa0, 0x59, 0x01, 0xac, 0xe5, 0xa8, 0x28, 0x22, 0x9a, 0x89, 0xcf, 0x4d,
  0xd3, 0xc0, 0xf0, 0x91, 0x1a, 0xa7, 0x77, 0xe3, 0x1f, 0x30, 0x7c, 0xc4,
  0xb6, 0x79, 0xda, 0xfe, 0x07, 0x0c, 0x1f, 0xb1, 0x6d, 0xfe, 0x36, 0xff,
  0x02, 0xc3, 0x47, 0xea, 0xbb, 0xb7, 0x8d, 0x90, 0xc0, 0xf0, 0x11, 0xdb,
  0xe6, 0x75, 0x2b, 0x34, 0x30, 0x7c, 0xa4, 0xbe, 0xfb, 0xdc, 0xbc, 0x0b,
  0x0c, 0x1f, 0xb1, 0x6f, 0xbd, 0xb7, 0x43, 0x02, 0xc3, 0x47, 0x6c, 0x9b,
  0xef, 0xcd, 0xd0, 0xc0, 0xf0, 0x91, 0xfa, 0xee, 0x79, 0xe3, 0x0d, 0x28,
  0x7c, 0x09, 0x69, 0x14, 0x1b, 0x2f, 0x30, 0x7c, 0xc4, 0xbe, 0x77, 0xdb,
  0x14, 0x09, 0x0c, 0x1f, 0xb1, 0xed, 0xde, 0x36, 0xf7, 0x02, 0xc3, 0x47,
  0xec, 0x7b, 0xcf, 0x0d, 0x92, 0xc0, 0xf0, 0x11, 0xdb, 0xee, 0x73, 0x9b,
  0x2f, 0x30, 0x7c, 0xc4, 0xbe, 0x77, 0xde, 0x34, 0x09, 0x0c, 0x1f, 0xb1,
  0xed, 0x9e, 0xb7, 0x40, 0x03, 0x84, 0x05, 0x26, 0x2a, 0x02, 0x26, 0xc2,
  0xb6, 0x0b, 0x10, 0xe9, 0x00, 0x06, 0xc7, 0xf2, 0x69, 0xfb, 0x2f, 0x30,
  0x7c, 0xc4, 0xbe, 0xfb, 0xdb, 0x10, 0x0d, 0x0c, 0x1f, 0xb1, 0xef, 0x5e,
  0xb7, 0x44, 0x03, 0xc3, 0x47, 0xec, 0xbb, 0xef, 0xed, 0x38, 0x60, 0xf0,
  0x11, 0xda, 0x90, 0x03, 0x06, 0x1f, 0xa9, 0xed, 0x3d, 0x60, 0xf0, 0x11,
  0xdb, 0x0c, 0x07, 0x22, 0xd8, 0x89, 0x96, 0x61, 0x05, 0x30, 0x34, 0x42,
  0x0c, 0xa4, 0xa9, 0xeb, 0xda, 0x0e, 0x07, 0x22, 0xd8, 0x89, 0x96, 0x61,
  0x05, 0x30, 0x34, 0x42, 0x0c, 0xa4, 0xa9, 0x6b, 0xdb, 0x4c, 0x07, 0xa2,
  0x0e, 0x91, 0x1e, 0x60, 0x12, 0x8e, 0x15, 0xc0, 0x24, 0xb1, 0x19, 0x88,
  0xcb, 0xb8, 0x08, 0x60, 0x9a, 0x22, 0x43, 0x1c, 0x88, 0x60, 0x27, 0x5a,
  0x86, 0x15, 0xc0, 0x3a, 0x24, 0x22, 0x84, 0x09, 0x71, 0x1a, 0xbb, 0x2f,
  0x28, 0x4a, 0xc7, 0xd8, 0x71, 0xab, 0x2f, 0x50, 0x58, 0x60, 0xa2, 0x22,
  0x60, 0x22, 0xec, 0xdb, 0x3e, 0x0d, 0x20, 0x87, 0x9a, 0x1e, 0x6a, 0xe2,
  0x9c, 0xc5, 0x89, 0x7c, 0xda, 0x47, 0x68, 0x03, 0x35, 0x80, 0x1c, 0x6a,
  0x7a, 0xa8, 0x89, 0x73, 0x16, 0x27, 0xf2, 0x69, 0x1f, 0xa9, 0x2d, 0xd4,
  0x00, 0x72, 0xa8, 0xe9, 0xa1, 0x26, 0xce, 0x59, 0x9c, 0xc8, 0xa7, 0x7d,
  0xc4, 0x36, 0x7d, 0x82, 0xa5, 0x25, 0xae, 0x89, 0x8a, 0x88, 0xd2, 0x01,
  0x06, 0xf3, 0x0d, 0x40, 0x7c, 0xda, 0x47, 0x6a, 0x1f, 0x69, 0xac, 0x37,
  0xa0, 0xf0, 0x69, 0x1f, 0xa1, 0xed, 0x37, 0xa0, 0xf0, 0x69, 0x1f, 0xa9,
  0x0d, 0x33, 0xa0, 0x0a, 0x91, 0x89, 0x3d, 0x80, 0x81, 0x88, 0x38, 0xa7,
  0x91, 0x26, 0xa0, 0x99, 0xa4, 0xda, 0xee, 0x0d, 0xbe, 0xe0, 0x58, 0x25,
  0x28, 0x9a, 0x76, 0xdd, 0x02, 0x09, 0x8e, 0x55, 0x82, 0xa2, 0x69, 0xdf,
  0xcd, 0x7b, 0xe0, 0x58, 0x25, 0x28, 0x9a, 0x76, 0xde, 0x20, 0x05, 0x8e,
  0x55, 0x82, 0xa2, 0x69, 0xef, 0xad, 0x59, 0xc0, 0xf0, 0x11, 0xda, 0xa6,
  0x6b, 0x3b, 0x1d, 0xa0, 0x3a, 0x44, 0x7a, 0x80, 0x49, 0x38, 0x56, 0x00,
  0x93, 0xc4, 0x66, 0x20, 0xae, 0xba, 0xbe, 0xcd, 0x5a, 0xc0, 0xf0, 0x11,
  0xda, 0xa6, 0x71, 0xcb, 0x16, 0x30, 0x7c, 0x84, 0xb6, 0xe9, 0xdd, 0x78,
  0x05, 0x8e, 0x55, 0x82, 0xa2, 0x89, 0xa7, 0x2d, 0x5d, 0xe0, 0x58, 0x25,
  0x28, 0x9a, 0xf8, 0xda, 0x44, 0x07, 0x8e, 0x55, 0x82, 0xa2, 0x89, 0xb7,
  0xcd, 0x9d, 0xe0, 0x58, 0x25, 0x28, 0x9a, 0xf8, 0xdb, 0xc0, 0x0b, 0x8e,
  0x55, 0x82, 0xa2, 0x89, 0xc7, 0xed, 0x32, 0xa0, 0x08, 0xea, 0xfa, 0xa6,
  0xad, 0x3a, 0xc0, 0xf0, 0x11, 0xba, 0xbe, 0x6f, 0xeb, 0x0e, 0x30, 0x7c,
  0x84, 0xae, 0xef, 0xdc, 0xbe, 0x03, 0x0c, 0x1f, 0xa1, 0xeb, 0x7b, 0xb7,
  0x6f, 0x01, 0xc3, 0x47, 0x68, 0xbb, 0xbe, 0x6d, 0x3c, 0xc0, 0xf0, 0x11,
  0xba, 0xbe, 0x7b, 0x5b, 0x0e, 0x78, 0x56, 0xc0, 0xda, 0xa8, 0xa2, 0x20,
  0xa2, 0xd2, 0x01, 0x06, 0x9b, 0x36, 0xe2, 0x80, 0x67, 0x05, 0xac, 0x8d,
  0x2a, 0x0a, 0x22, 0x2a, 0x1d, 0x60, 0xb0, 0x6b, 0xab, 0x0d, 0x78, 0x56,
  0xc0, 0xda, 0xa8, 0xa2, 0x20, 0xa2, 0xd2, 0x01, 0x06, 0xdb, 0x36, 0x6e,
  0x01, 0xc3, 0x47, 0x68, 0xbb, 0xa6, 0x4d, 0x5c, 0xc0, 0xf0, 0x11, 0xda,
  0xae, 0x75, 0x73, 0x0e, 0x30, 0x7c, 0x84, 0xae, 0xef, 0xda, 0xca, 0x05,
  0x0c, 0x1f, 0xa1, 0xed, 0xba, 0xb7, 0xf0, 0x00, 0xc3, 0x47, 0xe8, 0x1a,
  0xaf, 0x4d, 0x5d, 0xc0, 0xf0, 0x11, 0xda, 0xb6, 0x6d, 0x23, 0x0f, 0x30,
  0x7c, 0x84, 0xae, 0xf1, 0xdb, 0xe4, 0x05, 0x0c, 0x1f, 0xa1, 0x6d, 0x3b,
  0xb7, 0xf6, 0x00, 0xc3, 0x47, 0xe8, 0x1a, 0xcf, 0x6d, 0x92, 0xc0, 0xf0,
  0x11, 0xfa, 0xa6, 0x73, 0xab, 0x0f, 0x30, 0x7c, 0x84, 0xae, 0xf1, 0xdd,
  0xf4, 0x05, 0x0c, 0x1f, 0xa1, 0x6d, 0x9b, 0x37, 0xcb, 0x00, 0xc4, 0x04,
  0x26, 0x22, 0x42, 0x80, 0xc5, 0x9c, 0x05, 0x0c, 0x1f, 0xa9, 0x6d, 0xda,
  0xb6, 0xfe, 0x00, 0xc3, 0x47, 0xe8, 0x3a, 0xa7, 0x4d, 0x70, 0xc0, 0xf0,
  0x11, 0xda, 0xbe, 0x6b, 0xbb, 0x16, 0x30, 0x7c, 0xa4, 0xb6, 0xe9, 0xdc,
  0x00, 0x05, 0x0c, 0x1f, 0xa1, 0xeb, 0xfc, 0x36, 0xc6, 0x01, 0xc3, 0x47,
  0x68, 0xfb, 0xc6, 0x4d, 0x5b, 0xc0, 0xf0, 0x91, 0xda, 0xa6, 0x79, 0x1b,
  0x14, 0x30, 0x7c, 0x84, 0xae, 0x73, 0xdd, 0x1e, 0x07, 0x0c, 0x1f, 0xa1,
  0xed, 0x7b, 0x37, 0x43, 0x01, 0xc3, 0x47, 0xe8, 0x3a, 0xef, 0xed, 0x92,
  0xc0, 0xf0, 0x11, 0xfa, 0xae, 0x77, 0x23, 0x34, 0x30, 0x7c, 0x84, 0xc6,
  0x69, 0xda, 0xba, 0x05, 0x0c, 0x1f, 0xa9, 0xed, 0xba, 0x36, 0xc9, 0x01,
  0xc3, 0x47, 0x68, 0x1b, 0xa7, 0xed, 0x39, 0xc0, 0xf0, 0x91, 0xba, 0xbe,
  0x6d, 0xb3, 0x0e, 0x30, 0x7c, 0xa4, 0xae, 0x6f, 0xdc, 0x48, 0x0b, 0x8c,
  0xcf, 0x04, 0x06, 0x9b, 0xb7, 0xd1, 0x02, 0xe3, 0x33, 0x81, 0xc1, 0xee,
  0x4d, 0x3a, 0xa0, 0x59, 0x01, 0x6b, 0xa3, 0x8a, 0x82, 0x88, 0x4a, 0x07,
  0x18, 0xcc, 0x3b, 0xc0, 0xf0, 0x91, 0xba, 0xbe, 0x75, 0x63, 0x14, 0x30,
  0x7c, 0x84, 0xae, 0xf5, 0xdc, 0xc0, 0x03, 0x0c, 0x1f, 0xa9, 0xeb, 0x9b,
  0xb7, 0x71, 0x01, 0xc3, 0x47, 0x6a, 0xbb, 0xde, 0x2d, 0x52, 0xc0, 0xf0,
  0x11, 0xba, 0xd6, 0x79, 0x4b, 0x14, 0x30, 0x7c, 0x84, 0xae, 0x75, 0xdb,
  0x52, 0x07, 0x0c, 0x1f, 0xa1, 0x6d, 0xbc, 0xb7, 0xd1, 0x01, 0xc3, 0x47,
  0x68, 0x1b, 0xd7, 0x0d, 0x5c, 0xc0, 0xf0, 0x91, 0xda, 0xae, 0x71, 0xab,
  0x1c, 0x30, 0x7c, 0x84, 0xb6, 0xf1, 0xdb, 0x32, 0x0d, 0x0c, 0x1f, 0xa1,
  0x71, 0x5a, 0xb7, 0x57, 0x02, 0xc3, 0x47, 0xe8, 0xdb, 0xd6, 0x6d, 0xd1,
  0xc0, 0xf0, 0x11, 0x1a, 0xa7, 0x6f, 0xe3, 0x34, 0x30, 0x7c, 0x84, 0xc6,
  0xe9, 0xde, 0x88, 0x09, 0x0c, 0x1f, 0xa1, 0x6f, 0xbb, 0x37, 0xd0, 0x02,
  0xe3, 0x33, 0x81, 0xe1, 0xae, 0xed, 0xb3, 0xc0, 0xf8, 0x4c, 0x60, 0xb8,
  0x6d, 0x63, 0x26, 0x30, 0x7c, 0x84, 0xbe, 0xef, 0xda, 0xc4, 0x03, 0x0c,
  0x1f, 0xa9, 0x6b, 0xdc, 0xb6, 0xf2, 0x00, 0xc3, 0x47, 0xea, 0x1a, 0xa7,
  0x8d, 0x92, 0xc0, 0xf0, 0x91, 0xfa, 0xa6, 0x75, 0xe3, 0x2c, 0x30, 0x3e,
  0x13, 0x18, 0x6e, 0xdc, 0x36, 0x0b, 0x8c, 0xcf, 0x04, 0x86, 0x3b, 0x37,
  0x76, 0x02, 0xe3, 0x33, 0x81, 0xe1, 0xd6, 0x6d, 0x9d, 0xc0, 0xf8, 0x4c,
  0x60, 0xb8, 0x77, 0x0b, 0x27, 0x30, 0x7c, 0x84, 0xbe, 0xef, 0xde, 0xd0,
  0x09, 0x8c, 0xcf, 0x04, 0x86, 0xbb, 0x37, 0xfb, 0x00, 0xc3, 0x47, 0xea,
  0x1a, 0xe7, 0x2d, 0x9d, 0xc0, 0xf8, 0x4c, 0x60, 0xb8, 0x79, 0xcb, 0x14,
  0x30, 0x7c, 0x84, 0xae, 0xf7, 0xda, 0xcc, 0x03, 0x0c, 0x1f, 0xa9, 0x6b,
  0x1c, 0xb7, 0x54, 0x01, 0xc3, 0x47, 0xe8, 0x7a, 0xdf, 0xcd, 0x3d, 0xc0,
  0xf0, 0x91, 0xba, 0xc6, 0x75, 0x5b, 0x17, 0x30, 0x7c, 0xa4, 0xb6, 0xed,
  0xdb, 0xf6, 0x05, 0x0c, 0x1f, 0xa9, 0x6d, 0xbb, 0x37, 0xd8, 0x01, 0xc3,
  0x47, 0x68, 0x3b, 0xbf, 0xcd, 0x5c, 0xc0, 0xf0, 0x91, 0xda, 0xb6, 0x69,
  0x0b, 0x15, 0x30, 0x7c, 0x84, 0xae, 0x77, 0xdc, 0x56, 0x07, 0x0c, 0x1f,
  0xa1, 0xed, 0xbc, 0xb6, 0x6c, 0x02, 0xc3, 0x47, 0xe8, 0xfb, 0xbe, 0x6d,
  0x7a, 0xc0, 0xf0, 0x11, 0xda, 0xce, 0x7b, 0x9b, 0x17, 0x30, 0x7c, 0xa4,
  0xb6, 0x6d, 0xdd, 0x64, 0x07, 0x0c, 0x1f, 0xa1, 0xed, 0x3c, 0x37, 0xda,
  0x01, 0xc3, 0x47, 0x68, 0x3b, 0xdf, 0xed, 0x58, 0xc0, 0xf0, 0x11, 0xdb,
  0xa6, 0x69, 0x33, 0x27, 0x30, 0x3e, 0x13, 0x18, 0x70, 0xda, 0xca, 0x09,
  0x8c, 0xcf, 0x04, 0x06, 0xbc, 0x36, 0x6e, 0x02, 0xc3, 0x47, 0xe8, 0xfb,
  0xd6, 0xed, 0x9d, 0xc0, 0xf0, 0x11, 0xfa, 0xc6, 0x6d, 0xd3, 0x1e, 0x30,
  0x7c, 0x84, 0xb6, 0x75, 0xdb, 0x90, 0x09, 0x8c, 0xcf, 0x04, 0x06, 0x1c,
  0xb7, 0xef, 0x01, 0xc3, 0x47, 0x68, 0x5b, 0xcf, 0x0d, 0x72, 0xc0, 0xf0,
  0x91, 0xda, 0xbe, 0x79, 0x13, 0x26, 0x30, 0x3e, 0x13, 0x18, 0xf0, 0xdd,
  0xc6, 0x07, 0x0c, 0x1f, 0xa1, 0x6d, 0x9d, 0xb7, 0x65, 0x02, 0xe3, 0x33,
  0x81, 0x01, 0xb7, 0x4d, 0x99, 0xc0, 0xf8, 0x4c, 0x60, 0xc0, 0x6f, 0xcb,
  0x24, 0x30, 0x7c, 0xa4, 0xbe, 0x6b, 0xde, 0x8e, 0x09, 0x8c, 0xcf, 0x04,
  0x06, 0x3c, 0xb7, 0x61, 0x02, 0xe3, 0x33, 0x81, 0x01, 0xd7, 0x4d, 0xd2,
  0xc0, 0x69, 0x89, 0x6b, 0xa2, 0x22, 0xa2, 0x74, 0x80, 0xa1, 0xb6, 0x79,
  0x03, 0x26, 0x30, 0x3e, 0x13, 0x18, 0x70, 0xde, 0x7e, 0x09, 0x8c, 0xcf,
  0x04, 0x06, 0xbc, 0x37, 0x59, 0x01, 0xc3, 0x47, 0xe8, 0x9a, 0xd7, 0x2d,
  0x50, 0xc0, 0xf0, 0x91, 0xba, 0xce, 0x71, 0x7b, 0x15, 0x30, 0x7c, 0x84,
  0xae, 0xf9, 0xdb, 0xb6, 0x05, 0x0c, 0x1f, 0xb1, 0x6d, 0xba, 0x37, 0x42,
  0x01, 0xc3, 0x47, 0xea, 0x3a, 0xdf, 0x8d, 0x55, 0xc0, 0xf0, 0x11, 0xba,
  0xe6, 0x69, 0xc3, 0x16, 0x30, 0x7c, 0xc4, 0xb6, 0x69, 0xdd, 0x1a, 0x07,
  0x0c, 0x1f, 0xa9, 0xed, 0x3b, 0xb7, 0x5a, 0x01, 0xc3, 0x47, 0xe8, 0x9a,
  0xef, 0x2d, 0x59, 0x00, 0x5a, 0x01, 0x6b, 0xa3, 0x8a, 0x82, 0x88, 0x4a,
  0x07, 0x18, 0x6a, 0xba, 0xb6, 0x4a, 0x03, 0xa7, 0x25, 0xae, 0x89, 0x8a,
  0x88, 0xd2, 0x01, 0x86, 0xda, 0xde, 0xcd, 0x3f, 0xc0, 0xf0, 0x91, 0xba,
  0xce, 0x6b, 0xcb, 0x2f, 0x28, 0xbc, 0xeb, 0xd9, 0x73, 0x93, 0x16, 0x80,
  0x56, 0xc0, 0xda, 0xa8, 0xa2, 0x20, 0xa2, 0xd2, 0x01, 0x86, 0x9a, 0xb6,
  0x0d, 0x36, 0x00, 0x4a, 0x23, 0x84, 0x41, 0x26, 0xa4, 0x22, 0xc4, 0x66,
  0x20, 0x2e, 0x5e, 0x07, 0x01, 0x31, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x5b, 0x86, 0x2a, 0x70, 0x8d, 0x2d, 0xc5, 0x15, 0xc4, 0x06, 0x21, 0x1b,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
